import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,a as e}from"./app-BfYM-UTZ.js";const t={},p=e(`<h1 id="javascript基础零碎" tabindex="-1"><a class="header-anchor" href="#javascript基础零碎"><span>JavaScript基础零碎</span></a></h1><ul><li>在函数外声明的变量具有全局作用于，在函数内部声明的变量只在函数内部有效</li><li></li></ul><h2 id="关于-和-的使用" tabindex="-1"><a class="header-anchor" href="#关于-和-的使用"><span>关于<code>[ ]</code>和<code>{ }</code>的使用</span></a></h2><h3 id="的用法" tabindex="-1"><a class="header-anchor" href="#的用法"><span><code>{}</code> 的用法</span></a></h3><ul><li>在js中大括号 <code>{ }</code>表示的是对象，里面的内容是对象的内容。并且对象的每一项都是由键值对组成的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">=</span><span class="token string">&#39;alice&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中对象里面也可以嵌套复杂的数据结构</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">details</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&quot;555-1234&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在Vue.js中，组件的数据通常以对象的形式存在</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;hello vue&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="的用法-1" tabindex="-1"><a class="header-anchor" href="#的用法-1"><span><code>[]</code> 的用法</span></a></h3><ul><li>在js中，[]表示的是数组或列表</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="关于引号的区别" tabindex="-1"><a class="header-anchor" href="#关于引号的区别"><span>关于引号的区别</span></a></h2><ul><li>一般而言，在js中单引号和双引号都可以引用字符串，但双引号的优点是可以嵌套单引号</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sentence <span class="token operator">=</span> <span class="token string">&quot;He said, &#39;Hello, world!&#39;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>而反引号的好处是可以进行插值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;hello \${name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="关于-和-的区别" tabindex="-1"><a class="header-anchor" href="#关于-和-的区别"><span>关于 <code>=</code> 和 <code>:</code> 的区别</span></a></h2>`,19),l=[p];function i(o,c){return n(),s("div",null,l)}const u=a(t,[["render",i],["__file","JavaScript基础零碎.html.vue"]]),v=JSON.parse(`{"path":"/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%80%E9%9B%B6%E7%A2%8E.html","title":"JavaScript基础零碎","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"关于[ ]和{ }的使用","slug":"关于-和-的使用","link":"#关于-和-的使用","children":[{"level":3,"title":"{} 的用法","slug":"的用法","link":"#的用法","children":[]},{"level":3,"title":"[] 的用法","slug":"的用法-1","link":"#的用法-1","children":[]}]},{"level":2,"title":"关于引号的区别","slug":"关于引号的区别","link":"#关于引号的区别","children":[]},{"level":2,"title":"关于 = 和 : 的区别","slug":"关于-和-的区别","link":"#关于-和-的区别","children":[]}],"git":{"createdTime":1716472672000,"updatedTime":1716472672000,"contributors":[{"name":"Vinci","email":"1341060890@qq.com","commits":1}]},"readingTime":{"minutes":0.84,"words":253},"filePathRelative":"技术文章/JavaScript基础/JavaScript基础零碎.md","localizedDate":"2024年5月23日","excerpt":"\\n<ul>\\n<li>在函数外声明的变量具有全局作用于，在函数内部声明的变量只在函数内部有效</li>\\n<li></li>\\n</ul>\\n<h2>关于<code>[ ]</code>和<code>{ }</code>的使用</h2>\\n<h3><code>{}</code> 的用法</h3>\\n<ul>\\n<li>在js中大括号 <code>{ }</code>表示的是对象，里面的内容是对象的内容。并且对象的每一项都是由键值对组成的</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">=</span><span class=\\"token string\\">'alice'</span><span class=\\"token punctuation\\">,</span>\\n  age<span class=\\"token operator\\">=</span><span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}`);export{u as comp,v as data};
