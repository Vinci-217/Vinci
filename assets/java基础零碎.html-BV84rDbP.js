import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a as n}from"./app-Ch5_AW_3.js";const i={},l=n(`<h1 id="java基础零碎" tabindex="-1"><a class="header-anchor" href="#java基础零碎"><span>Java基础零碎</span></a></h1><h2 id="语法基础" tabindex="-1"><a class="header-anchor" href="#语法基础"><span>语法基础</span></a></h2><ul><li><p>Java的程序实际上是在虚拟机JVM上运行的，这就完美实现了可移植性，解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误</p></li><li><p>Java中，每一个函数，实际上就是类中的方法。</p></li><li><p>关于类似（2.0-1.1不等于0.9的问题）：浮点数采用二进制表示，而不是十进制。二进制中无法精确表示1/10，就像十进制无法精确表示1/3一样</p></li><li><p>特殊字符的转移序列：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>- \\b 退格</span></span>
<span class="line"><span>- \\t 制表</span></span>
<span class="line"><span>- \\n 换行</span></span>
<span class="line"><span>- \\r 回车</span></span>
<span class="line"><span>- \\&quot; 双引号</span></span>
<span class="line"><span>- \\&#39; 单引号</span></span>
<span class="line"><span>- \\\\ 反斜杠</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在Java中，x=0不能替换为boolern使用</p></li><li><p>Java中用final修饰常量</p></li><li><p>static final 修饰类变量，这个常量可以在一个类的多个方法中使用</p></li><li><p>局部变量可以通过var修饰，不需要指明类型，但这并不是一种很好的编程方法</p></li><li><p>输入时，采用Scanner对象进行输入，需要先创建一个Scanner对象，通过对象的方法读入</p></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul><li>String在java中是<strong>不可变类型</strong>的变量，对String类型的变量重新赋值，相当于将这个变量重新指向了另一个字符串，而不是修改了这个字符串。当两个字符串变量同时被赋值为一个字符串时，实际上他们同时指向一块字符串占据的内存。这个概念是不同于C/C++中的字符数组的。 并且如果对String类型的变量重新赋值，假如旧的字符串不被其他变量使用，那么就会被Java自动进行垃圾回收</li><li>比较字符串时，尽量使用字符串的equals方法进行比较。因为equals比较的本质是比较字符串的字面量，而“==”比较的本质是看两个变量是否指向同一块内存。一般情况下他们得到的结果是相同的，但是+或者substring等操作得到的字符串，和另一个具有相同字面量的字符串变量就不指向同一块地址了。</li><li>在字符串变量中，&quot;&quot;表示空串，也表示长度为0的字符串，但不表示null。也就是说null和&quot;&quot;是完全相异的概念</li><li>String也是由char序列组成的，调用字符串的charAt(n)将返回位置n的代码单元，可以用这种方法遍历字符串</li></ul><h2 id="大数" tabindex="-1"><a class="header-anchor" href="#大数"><span>大数</span></a></h2><ul><li>在java.math包里面有两个很有用的类：BigInteger和BigDecimal。这两个类可以处理包含任意长度数字序列的数值。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">BigInteger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> a </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> BigInteger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">valueof</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">100</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 相对较小的数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">BigInteger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> big </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> BigInteger</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;6546512165165050650651&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 相对较大的数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">BigInteger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> c </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> a</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(b);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">BigInteger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> d </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> c</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">multiply</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(b);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>java中没有运算符重载的功能，因此程序员不能够自定义运算符，只能用BigInteger中的方法进行运算</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li>数组的长度一旦被确定了，就不能修改大小了。如果想要经常扩展数组的大小，那么就需要使用数组列表</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> [] a </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#E06C75;">[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">100</span><span style="color:#24292E;--shiki-dark:#E06C75;">]</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在java中，允许出现长度为0的数组，但并不是null</li><li>java的数组初始化以后会自动填充默认值，而不是像C语言一样填充垃圾值</li><li>for each循环语句中的循环变量会遍历数组元素中的每个元素，而不是下标值</li><li>数组拷贝要用copyof方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> [] b </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Arrays</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">copyof</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(a,</span><span style="color:#24292E;--shiki-dark:#E5C07B;">a</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>数组排序要用sort静态方法</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Arrays.sort(a);</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>排序以后数组元素的位置并没有变化，而是数组指向的位置发生了变化</p></li><li><p>注意数组是<strong>引用类型</strong>，并且数组大小不可变</p></li></ul><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2><ul><li>在Java中，对于对象的方法传递，并不是引用传递，而是按值传递。但是可以通过传递对象的方式修改对象的属性和值。</li><li>在方法重载中，返回类型不是方法签名的一部分。也就是说不能有两个名字相同，参数类型相同，但有不同返回类型的方法。</li><li>在一个构造器中可以使用this来调用另一个构造器</li></ul><h2 id="hashcode和equals方法" tabindex="-1"><a class="header-anchor" href="#hashcode和equals方法"><span>hashCode和equals方法</span></a></h2><ul><li><code>hashCode</code>方法返回对象的哈希码值，它是一个整数。哈希码通常用于散列表中的散列算法，例如Java中的 <code>HashMap</code>、<code>HashSet</code>等集合。</li><li><code>equals</code>方法用于判断两个对象是否相等。它是从 <code>Object</code>类继承而来的，默认实现是比较对象的内存地址。</li><li>根据Java的规范，<code>hashCode</code>和 <code>equals</code>方法必须满足以下条件： <ol><li><strong>如果两个对象相等（即 <code>equals(Object obj)</code> 返回 <code>true</code>），那么它们的哈希码值必须相等</strong>。即对于任何两个对象 <code>a</code> 和 <code>b</code>，如果 <code>a.equals(b)</code> 为 <code>true</code>，那么 <code>a.hashCode() == b.hashCode()</code> 也必须为 <code>true</code>。</li><li><strong>如果两个对象的哈希码值相等，它们并不一定相等</strong>。即对于任何两个对象 <code>a</code> 和 <code>b</code>，如果 <code>a.hashCode() == b.hashCode()</code> 为 <code>true</code>，<code>a.equals(b)</code> 不一定为 <code>true</code>。</li><li><strong>如果对象在equals比较中不相等，那么它们的hashCode值不要求一定不相等，但好的hashCode实现应该尽量避免这种情况</strong>。为了提高散列表的性能，不相等的对象尽量具有不同的哈希码值。</li></ol></li></ul><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p><strong>在Java编程中，异常分为两大类：****checked异常</strong>和<strong>unchecked异常</strong>。这两类异常的主要区别在于它们的处理方式以及在编译时和运行时的行为。下面是详细的解释：</p><h3 id="checked异常" tabindex="-1"><a class="header-anchor" href="#checked异常"><span>Checked异常</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p><strong>Checked异常是那些在编译时就必须处理的异常。这意味着，如果某个方法可能会抛出checked异常，那么该方法要么必须在方法签名中声明该异常，要么必须在方法体内通过try-catch块进行处理。</strong></p><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h4><ul><li><strong>编译时检查</strong>：编译器会强制检查这些异常是否被处理。</li><li><strong>必须处理</strong>：如果不处理checked异常，代码将无法通过编译。</li><li><strong>典型例子</strong>：<code>IOException</code>, <code>SQLException</code>, <code>ClassNotFoundException</code> 等。</li></ul><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>import java.io.File;</span></span>
<span class="line"><span>import java.io.FileNotFoundException;</span></span>
<span class="line"><span>import java.io.FileReader;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class CheckedExceptionExample {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            File file = new File(&quot;non_existent_file.txt&quot;);</span></span>
<span class="line"><span>            FileReader fr = new FileReader(file);</span></span>
<span class="line"><span>        } catch (FileNotFoundException e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在上面的例子中，</strong><code>FileNotFoundException</code>是一个checked异常，必须通过try-catch块处理，否则编译器会报错。</p><h3 id="unchecked异常" tabindex="-1"><a class="header-anchor" href="#unchecked异常"><span>Unchecked异常</span></a></h3><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h4><p><strong>Unchecked异常是那些在编译时不强制要求处理的异常。它们通常是由程序中的逻辑错误或程序员的疏忽引起的。这类异常在运行时才会抛出。</strong></p><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h4><ul><li><strong>运行时检查</strong>：编译器不强制检查这些异常是否被处理。</li><li><strong>不强制处理</strong>：程序员可以选择处理或不处理unchecked异常。</li><li><strong>典型例子</strong>：<code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>, <code>ArithmeticException</code> 等。</li></ul><h4 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>public class UncheckedExceptionExample {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        int[] numbers = {1, 2, 3};</span></span>
<span class="line"><span>        System.out.println(numbers[3]); // 这将抛出ArrayIndexOutOfBoundsException</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在上面的例子中，</strong><code>ArrayIndexOutOfBoundsException</code>是一个unchecked异常，程序不会在编译时提醒处理这个异常，但它会在运行时抛出。</p><h3 id="异常的继承关系" tabindex="-1"><a class="header-anchor" href="#异常的继承关系"><span>异常的继承关系</span></a></h3><p><strong>在Java的异常层次结构中：</strong></p><ul><li><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>java.lang.Throwable</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>是所有异常的根类。</strong></p><ul><li><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>java.lang.Exception</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>是所有checked异常的父类。</strong></p><ul><li><code>java.lang.RuntimeException</code>是所有unchecked异常的父类。</li></ul></li></ul></li></ul><p><strong>因此，checked异常是</strong> <code>Exception</code>的直接子类（但不包括 <code>RuntimeException</code>及其子类），而unchecked异常是 <code>RuntimeException</code>及其子类。</p><h2 id="iterable接口和iteator接口" tabindex="-1"><a class="header-anchor" href="#iterable接口和iteator接口"><span>Iterable接口和Iteator接口</span></a></h2><ol><li><strong>用途</strong>： <ul><li><code>Iterable</code>：定义一个集合可以被迭代，但不提供具体的迭代实现。实现 <code>Iterable</code>接口的类可以使用增强型for循环。</li><li><code>Iterator</code>：提供具体的迭代功能，可以在迭代过程中删除元素。</li></ul></li><li><strong>方法</strong>： <ul><li><code>Iterable</code>只有一个方法 <code>iterator()</code>，返回一个 <code>Iterator</code>对象。</li><li><code>Iterator</code>有三个方法：<code>hasNext()</code>，<code>next()</code>，和 <code>remove()</code>，用于遍历和修改集合。</li></ul></li><li><strong>关系</strong>： <ul><li><strong>实现</strong> <code>Iterable</code>接口的类必须提供一个 <code>iterator()</code>方法，该方法返回一个 <code>Iterator</code>对象。</li><li><code>Iterator</code>接口提供了实际的迭代行为，是遍历集合元素的工具。</li></ul></li></ol><h2 id="输入" tabindex="-1"><a class="header-anchor" href="#输入"><span>输入</span></a></h2><ul><li>在java里面输出很简单，直接<code>System.out.print()</code>就可以，但是输入相对麻烦。一个输入的示例如下：</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span>Scanner scanner = new Scanner(System.in);</span></span>
<span class="line"><span>String s = scanner.nextLine();</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,48),d=[l];function r(c,o){return e(),s("div",null,d)}const h=a(i,[["render",r],["__file","java基础零碎.html.vue"]]),k=JSON.parse(`{"path":"/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E5%9F%BA%E7%A1%80%E9%9B%B6%E7%A2%8E.html","title":"Java基础零碎","lang":"zh-CN","frontmatter":{"category":["技术文章"],"tag":["Java","语法基础"]},"headers":[{"level":2,"title":"语法基础","slug":"语法基础","link":"#语法基础","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"大数","slug":"大数","link":"#大数","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":2,"title":"hashCode和equals方法","slug":"hashcode和equals方法","link":"#hashcode和equals方法","children":[]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Checked异常","slug":"checked异常","link":"#checked异常","children":[]},{"level":3,"title":"Unchecked异常","slug":"unchecked异常","link":"#unchecked异常","children":[]},{"level":3,"title":"异常的继承关系","slug":"异常的继承关系","link":"#异常的继承关系","children":[]}]},{"level":2,"title":"Iterable接口和Iteator接口","slug":"iterable接口和iteator接口","link":"#iterable接口和iteator接口","children":[]},{"level":2,"title":"输入","slug":"输入","link":"#输入","children":[]}],"git":{"createdTime":1716472672000,"updatedTime":1717773997000,"contributors":[{"name":"Vinci","email":"1341060890@qq.com","commits":5}]},"readingTime":{"minutes":6.95,"words":2086},"filePathRelative":"技术文章/Java学习笔记/java基础零碎.md","localizedDate":"2024年5月23日","excerpt":"\\n<h2>语法基础</h2>\\n<ul>\\n<li>\\n<p>Java的程序实际上是在虚拟机JVM上运行的，这就完美实现了可移植性，解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误</p>\\n</li>\\n<li>\\n<p>Java中，每一个函数，实际上就是类中的方法。</p>\\n</li>\\n<li>\\n<p>关于类似（2.0-1.1不等于0.9的问题）：浮点数采用二进制表示，而不是十进制。二进制中无法精确表示1/10，就像十进制无法精确表示1/3一样</p>\\n</li>\\n<li>\\n<p>特殊字符的转移序列：</p>\\n<div class=\\"language- line-numbers-mode\\" data-ext=\\"\\" data-title=\\"\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\" style=\\"background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span>- \\\\b 退格</span></span>\\n<span class=\\"line\\"><span>- \\\\t 制表</span></span>\\n<span class=\\"line\\"><span>- \\\\n 换行</span></span>\\n<span class=\\"line\\"><span>- \\\\r 回车</span></span>\\n<span class=\\"line\\"><span>- \\\\\\" 双引号</span></span>\\n<span class=\\"line\\"><span>- \\\\' 单引号</span></span>\\n<span class=\\"line\\"><span>- \\\\\\\\ 反斜杠</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>在Java中，x=0不能替换为boolern使用</p>\\n</li>\\n<li>\\n<p>Java中用final修饰常量</p>\\n</li>\\n<li>\\n<p>static final 修饰类变量，这个常量可以在一个类的多个方法中使用</p>\\n</li>\\n<li>\\n<p>局部变量可以通过var修饰，不需要指明类型，但这并不是一种很好的编程方法</p>\\n</li>\\n<li>\\n<p>输入时，采用Scanner对象进行输入，需要先创建一个Scanner对象，通过对象的方法读入</p>\\n</li>\\n</ul>"}`);export{h as comp,k as data};
