import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as e}from"./app-BfYM-UTZ.js";const l={},t=e(`<h1 id="java基础零碎" tabindex="-1"><a class="header-anchor" href="#java基础零碎"><span>Java基础零碎</span></a></h1><h2 id="语法基础" tabindex="-1"><a class="header-anchor" href="#语法基础"><span>语法基础</span></a></h2><ul><li><p>Java的程序实际上是在虚拟机JVM上运行的，这就完美实现了可移植性，解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误</p></li><li><p>Java中，每一个函数，实际上就是类中的方法。</p></li><li><p>关于类似（2.0-1.1不等于0.9的问题）：浮点数采用二进制表示，而不是十进制。二进制中无法精确表示1/10，就像十进制无法精确表示1/3一样</p></li><li><p>特殊字符的转移序列：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- \\b 退格
- \\t 制表
- \\n 换行
- \\r 回车
- \\&quot; 双引号
- \\&#39; 单引号
- \\\\ 反斜杠
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在Java中，x=0不能替换为boolern使用</p></li><li><p>Java中用final修饰常量</p></li><li><p>static final 修饰类变量，这个常量可以在一个类的多个方法中使用</p></li><li><p>局部变量可以通过var修饰，不需要指明类型，但这并不是一种很好的编程方法</p></li><li><p>输入时，采用Scanner对象进行输入，需要先创建一个Scanner对象，通过对象的方法读入</p></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul><li>String在java中是不可变类型的变量，对String类型的变量重新赋值，相当于将这个变量重新指向了另一个字符串，而不是修改了这个字符串。当两个字符串变量同时被赋值为一个字符串时，实际上他们同时指向一块字符串占据的内存。这个概念是不同于C/C++中的字符数组的。 并且如果对String类型的变量重新赋值，假如旧的字符串不被其他变量使用，那么就会被Java自动进行垃圾回收</li><li>比较字符串时，尽量使用字符串的equals方法进行比较。因为equals比较的本质是比较字符串的字面量，而“=”比较的本质是看两个变量是否指向同一块内存。一般情况下他们得到的结果是相同的，但是+或者substring等操作得到的字符串，和另一个具有相同字面量的字符串变量就不指向同一块地址了。</li><li>在字符串变量中，&quot;&quot;表示空串，也表示长度为0的字符串，但不表示null。也就是说null和&quot;&quot;是完全相异的概念</li><li>String也是由char序列组成的，调用字符串的charAt(n)将返回位置n的代码单元，可以用这种方法遍历字符串</li></ul><h2 id="大数" tabindex="-1"><a class="header-anchor" href="#大数"><span>大数</span></a></h2><ul><li>在java.math包里面有两个很有用的类：BigInteger和BigDecimal。这两个类可以处理包含任意长度数字序列的数值。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span> a <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对较小的数</span>
<span class="token class-name">BigInteger</span> big <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;6546512165165050650651&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对较大的数</span>
<span class="token class-name">BigInteger</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInteger</span> d <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>java中没有运算符重载的功能，因此程序员不能够自定义运算符，只能用BigInteger中的方法进行运算</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li>数组的长度一旦被确定了，就不能修改大小了。如果想要经常扩展数组的大小，那么就需要使用数组列表</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在java中，允许出现长度为0的数组，但并不是null</li><li>java的数组初始化以后会自动填充默认值，而不是像C语言一样填充垃圾值</li><li>for each循环语句中的循环变量会遍历数组元素中的每个元素，而不是下标值</li><li>数组拷贝要用copyof方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyof</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2><ul><li>在Java中，对于对象的方法传递，并不是引用传递，而是按值传递。但是可以通过传递对象的方式修改对象的属性和值。</li><li>在方法重载中，返回类型不是方法签名的一部分。也就是说不能有两个名字相同，参数类型相同，但有不同返回类型的方法。</li><li>在一个构造器中可以使用this来调用另一个构造器</li></ul>`,16),i=[t];function p(c,o){return s(),n("div",null,i)}const d=a(l,[["render",p],["__file","java基础零碎.html.vue"]]),v=JSON.parse(`{"path":"/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E5%9F%BA%E7%A1%80%E9%9B%B6%E7%A2%8E.html","title":"Java基础零碎","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"语法基础","slug":"语法基础","link":"#语法基础","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"大数","slug":"大数","link":"#大数","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]}],"git":{"createdTime":1716472672000,"updatedTime":1716472672000,"contributors":[{"name":"Vinci","email":"1341060890@qq.com","commits":1}]},"readingTime":{"minutes":3.38,"words":1015},"filePathRelative":"技术文章/Java学习笔记/java基础零碎.md","localizedDate":"2024年5月23日","excerpt":"\\n<h2>语法基础</h2>\\n<ul>\\n<li>\\n<p>Java的程序实际上是在虚拟机JVM上运行的，这就完美实现了可移植性，解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误</p>\\n</li>\\n<li>\\n<p>Java中，每一个函数，实际上就是类中的方法。</p>\\n</li>\\n<li>\\n<p>关于类似（2.0-1.1不等于0.9的问题）：浮点数采用二进制表示，而不是十进制。二进制中无法精确表示1/10，就像十进制无法精确表示1/3一样</p>\\n</li>\\n<li>\\n<p>特殊字符的转移序列：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>- \\\\b 退格\\n- \\\\t 制表\\n- \\\\n 换行\\n- \\\\r 回车\\n- \\\\\\" 双引号\\n- \\\\' 单引号\\n- \\\\\\\\ 反斜杠\\n</code></pre></div></li>\\n<li>\\n<p>在Java中，x=0不能替换为boolern使用</p>\\n</li>\\n<li>\\n<p>Java中用final修饰常量</p>\\n</li>\\n<li>\\n<p>static final 修饰类变量，这个常量可以在一个类的多个方法中使用</p>\\n</li>\\n<li>\\n<p>局部变量可以通过var修饰，不需要指明类型，但这并不是一种很好的编程方法</p>\\n</li>\\n<li>\\n<p>输入时，采用Scanner对象进行输入，需要先创建一个Scanner对象，通过对象的方法读入</p>\\n</li>\\n</ul>"}`);export{d as comp,v as data};
