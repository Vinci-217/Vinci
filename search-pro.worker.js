const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":164,\"nextId\":164,\"documentIds\":{\"0\":\"1\",\"1\":\"1#我是谁-who-am-i\",\"2\":\"1#这是什么-what-is-this\",\"3\":\"1#关于初心-about-beginnings\",\"4\":\"2\",\"5\":\"3\",\"6\":\"4\",\"7\":\"5\",\"8\":\"6\",\"9\":\"6#java基础\",\"10\":\"6#javascript基础\",\"11\":\"6#python基础\",\"12\":\"6#vue基础\",\"13\":\"6#数据库\",\"14\":\"6#数据结构与算法\",\"15\":\"7\",\"16\":\"8\",\"17\":\"8#关于-和-的使用\",\"18\":\"8#的用法\",\"19\":\"8#的用法-1\",\"20\":\"8#关于引号的区别\",\"21\":\"8#关于-和-的区别\",\"22\":\"8#关于-和-区别\",\"23\":\"9\",\"24\":\"10\",\"25\":\"10#语法基础\",\"26\":\"10#字符串\",\"27\":\"10#大数\",\"28\":\"10#数组\",\"29\":\"10#面向对象\",\"30\":\"10#hashcode和equals方法\",\"31\":\"10#异常\",\"32\":\"10#checked异常\",\"33\":\"10#定义\",\"34\":\"10#特点\",\"35\":\"10#示例代码\",\"36\":\"10#unchecked异常\",\"37\":\"10#定义-1\",\"38\":\"10#特点-1\",\"39\":\"10#示例代码-1\",\"40\":\"10#异常的继承关系\",\"41\":\"10#iterable接口和iteator接口\",\"42\":\"11\",\"43\":\"11#变量\",\"44\":\"11#方法\",\"45\":\"11#字符串拼接\",\"46\":\"11#打印换行符和制表符\",\"47\":\"11#强转\",\"48\":\"11#注释\",\"49\":\"11#列表\",\"50\":\"11#增加元素\",\"51\":\"11#按位置删除\",\"52\":\"11#按值删除\",\"53\":\"11#排序\",\"54\":\"11#反序\",\"55\":\"11#数组长度\",\"56\":\"11#列表推导式\",\"57\":\"11#数学运算\",\"58\":\"11#列表格式操作\",\"59\":\"11#列表解析\",\"60\":\"11#切片\",\"61\":\"11#复制\",\"62\":\"11#元组\",\"63\":\"11#修改元组的唯一方式\",\"64\":\"11#循环\",\"65\":\"11#if条件\",\"66\":\"11#字典\",\"67\":\"11#输入\",\"68\":\"11#函数\",\"69\":\"11#传参\",\"70\":\"11#导入包\",\"71\":\"11#导入函数\",\"72\":\"11#导入文件\",\"73\":\"11#别名\",\"74\":\"11#类\",\"75\":\"11#继承关系\",\"76\":\"11#定义子类的属性\",\"77\":\"11#重写父类方法\",\"78\":\"11#将类作为属性\",\"79\":\"11#导入类包\",\"80\":\"11#文件操作和异常\",\"81\":\"11#异常\",\"82\":\"11#杂项\",\"83\":\"11#json文件\",\"84\":\"11#写入json文件\",\"85\":\"11#读取json文件\",\"86\":\"11#重构\",\"87\":\"11#测试\",\"88\":\"11#常见的断言方法\",\"89\":\"12\",\"90\":\"12#vue实例\",\"91\":\"12#组件化应用\",\"92\":\"12#生命周期钩子\",\"93\":\"12#模板语法\",\"94\":\"12#文本插值\",\"95\":\"12#html插值\",\"96\":\"12#attribute插值\",\"97\":\"12#指令\",\"98\":\"12#计算属性和侦听属性\",\"99\":\"12#计算属性\",\"100\":\"12#侦听器\",\"101\":\"12#v-model\",\"102\":\"12#组件\",\"103\":\"13\",\"104\":\"14\",\"105\":\"15\",\"106\":\"16\",\"107\":\"16#数据库语言的分类\",\"108\":\"16#select语句的用法\",\"109\":\"16#order-by子句\",\"110\":\"16#distinct子句\",\"111\":\"16#where子句\",\"112\":\"16#and和or子句\",\"113\":\"16#fetch子句\",\"114\":\"16#in子句\",\"115\":\"16#like子句\",\"116\":\"17\",\"117\":\"17#redis是什么\",\"118\":\"17#redis中常用的数据类型\",\"119\":\"17#常用操作命令\",\"120\":\"17#字符串\",\"121\":\"17#哈希\",\"122\":\"17#列表\",\"123\":\"17#集合\",\"124\":\"17#有序集合\",\"125\":\"17#通用命令\",\"126\":\"18\",\"127\":\"18#第一范式\",\"128\":\"18#第二范式\",\"129\":\"18#第三范式\",\"130\":\"19\",\"131\":\"19#数据库操作语句\",\"132\":\"19#字句与附加内容\",\"133\":\"19#数据库定义语句\",\"134\":\"19#oracle数据库标准库函数-math库-dml库-操作游标-json\",\"135\":\"19#_1-单行函数\",\"136\":\"19#字符函数\",\"137\":\"19#数值函数\",\"138\":\"19#日期函数\",\"139\":\"19#_2-聚合函数-详细-三个不同\",\"140\":\"19#_3-转换函数\",\"141\":\"19#_4-分析函数\",\"142\":\"19#_5-空值处理函数-详细\",\"143\":\"19#mysql数据库函数\",\"144\":\"19#_1-字符串函数\",\"145\":\"19#_2-数值函数\",\"146\":\"19#_3-日期和时间函数\",\"147\":\"19#_4-条件表达式\",\"148\":\"19#_5-聚合函数\",\"149\":\"19#_6-其他有用的函数\",\"150\":\"19#postgresql数据库函数\",\"151\":\"19#_1-字符串函数-1\",\"152\":\"19#_2-数值函数-1\",\"153\":\"19#_3-日期和时间函数-1\",\"154\":\"19#_4-条件表达式-1\",\"155\":\"19#_5-聚合函数-1\",\"156\":\"19#_6-数组函数\",\"157\":\"19#_7-地理空间函数-gis\",\"158\":\"20\",\"159\":\"21\",\"160\":\"22\",\"161\":\"23\",\"162\":\"24\",\"163\":\"25\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[3],\"1\":[6,6],\"2\":[6,6],\"3\":[4,8],\"4\":[1],\"5\":[1,44],\"6\":[1,7],\"7\":[1,51],\"8\":[1,8],\"9\":[1],\"10\":[1],\"11\":[1],\"12\":[1],\"13\":[1],\"14\":[1,7],\"15\":[1,5],\"16\":[1,2],\"17\":[3],\"18\":[1,35],\"19\":[1,11],\"20\":[1,16],\"21\":[3],\"22\":[3,39],\"23\":[1,5],\"24\":[1],\"25\":[1,44],\"26\":[1,31],\"27\":[1,22],\"28\":[1,23],\"29\":[1,11],\"30\":[1,40],\"31\":[1,6],\"32\":[1],\"33\":[1,7],\"34\":[1,11],\"35\":[1,31],\"36\":[1],\"37\":[1,4],\"38\":[1,10],\"39\":[1,23],\"40\":[1,14],\"41\":[1,26],\"42\":[1],\"43\":[1,4],\"44\":[1,23],\"45\":[1,11],\"46\":[1,7],\"47\":[1,3],\"48\":[1,3],\"49\":[1],\"50\":[1,10],\"51\":[1,7],\"52\":[1,4],\"53\":[1,9],\"54\":[1,3],\"55\":[1,6],\"56\":[1],\"57\":[1,5],\"58\":[1,8],\"59\":[1,11],\"60\":[1,6],\"61\":[1,4],\"62\":[1,7],\"63\":[1,6],\"64\":[1,18],\"65\":[1,22],\"66\":[1,52],\"67\":[1,9],\"68\":[1,7],\"69\":[1,31],\"70\":[1],\"71\":[1,6],\"72\":[1,5],\"73\":[1,7],\"74\":[1,35],\"75\":[1,27],\"76\":[1,17],\"77\":[1,32],\"78\":[1,23],\"79\":[1,18],\"80\":[1,67],\"81\":[1,13],\"82\":[1,10],\"83\":[1],\"84\":[1,21],\"85\":[1,14],\"86\":[1,1],\"87\":[1,48],\"88\":[1,10],\"89\":[1,4],\"90\":[1,16],\"91\":[1,51],\"92\":[1,17],\"93\":[1],\"94\":[1,13],\"95\":[1,10],\"96\":[1,11],\"97\":[1,33],\"98\":[1],\"99\":[1,43],\"100\":[1,30],\"101\":[2,25],\"102\":[1,51],\"103\":[1,7],\"104\":[1],\"105\":[1],\"106\":[1,6],\"107\":[1,20],\"108\":[1,8],\"109\":[2,15],\"110\":[1,6],\"111\":[1,26],\"112\":[1,5],\"113\":[1,34],\"114\":[1,15],\"115\":[1,17],\"116\":[1],\"117\":[2,17],\"118\":[1,16],\"119\":[1,2],\"120\":[1,12],\"121\":[1,12],\"122\":[1,12],\"123\":[1,17],\"124\":[1,23],\"125\":[1,12],\"126\":[1,3],\"127\":[1,18],\"128\":[1,41],\"129\":[1,49],\"130\":[1,5],\"131\":[1,9],\"132\":[1,36],\"133\":[1,16],\"134\":[6],\"135\":[2],\"136\":[1,32],\"137\":[1,22],\"138\":[1,30],\"139\":[5,19],\"140\":[2,22],\"141\":[2,18],\"142\":[4,19],\"143\":[1],\"144\":[2,31],\"145\":[2,19],\"146\":[2,32],\"147\":[2,22],\"148\":[2,20],\"149\":[2,16],\"150\":[1],\"151\":[2,38],\"152\":[2,19],\"153\":[2,25],\"154\":[2,27],\"155\":[2,19],\"156\":[2,15],\"157\":[4,11],\"158\":[1,3],\"159\":[2],\"160\":[1],\"161\":[1],\"162\":[1],\"163\":[1]},\"averageFieldLength\":[1.3353658536585375,17.55478343197042],\"storedFields\":{\"0\":{\"h\":\"关于 | About\"},\"1\":{\"h\":\"我是谁 | Who Am I ?\",\"t\":[\"一名计算机专业学生\",\"一名程序员\",\"一名极客\",\"一条善良的灵魂\",\"一个喜欢思考和总结的人\",\"......\"]},\"2\":{\"h\":\"这是什么 | What is this？\",\"t\":[\"一个个人总结\",\"一个生活记录\",\"一些学习笔记\",\"一些生活感悟\",\"一些方法论\",\"......\"]},\"3\":{\"h\":\"关于初心 | About Beginnings\",\"t\":[\"做这个网站的初心是记录我个人学习过程中的总结和经验分享，同时也能在记重点的过程中形成正向反馈。当我在某个知识忘记之后，某个瞬间看到曾经记过的笔记，也许会恍然大悟。\",\"如果你能在阅读我的笔记的同时收获一些感悟，那就更好了。\"]},\"4\":{\"h\":\"代码之外\"},\"5\":{\"h\":\"成长历程\",\"t\":[\"5/4 老师的经历对我触动很大\",\"老师一开始现在小厂工作，几年以后小厂倒闭了。后来老师决定自己创业。\",\"起初老师创业做的方向是OpenGL图形方向，立志要做出国产化的图形系统。要知道这个方向是当时非常具有前景的，并且也属于一种大国重器和卡脖子技术，如果能够顺利完成的话，将会带来很多的商业收益和非常大的学术贡献。\",\"但是后来遇到了各种现实阻力。老师和我说一块芯片就要10w块钱。并且当时的研究生质量也不是很好，成果很少并且成本很高，所以这个方向一直都没有实现下去。\",\"后来转型做一业和服务的业务，并且依托学校平台和校友资源，拉拢了一些学校的人才，这才慢慢景气起来。包括现在老师也是一周不休息每天都工作。\",\"老师和我说曾经也有一个学生像我一样（叫什么名字我记不清了），它先在京东呆了一段时间，后来借助大厂的跳板到了美国亚马逊工作。国外的生活不仅压力小而且收益多。\",\"老师还和我说：以后创业的话，先在公司工作一段时间，了解整个的模式以后自己再创业，这样就有了经验了。我和老师说：我的想法也是这样的，以后可能也准备创业。老师还说以后我要是想创业了肯定支持我（笑）\",\"老师还问了问我的家乡，说到山西的肉特别好吃。我答道：要是您来山西，我肯定招待您。\",\"老师说服务器已经给我开好了，这下我不得不加班加点完成任务了\"]},\"6\":{\"h\":\"学习方法\",\"t\":[\"学习要有好的学习方法，才会事半功倍。我会总结自己的学习方法，在深入理解的过程中也能分享给别人 (੭ˊᵕˋ)੭*ଘ\"]},\"7\":{\"h\":\"输出是最好的记忆方法\",\"t\":[\"这里的输出，可不是程序中的输出哈！输出就是把你学到的东西或者记忆的东西，通过你自己的方式表述一遍，或者具体在做题的时候你想到这个东西应用出来，这就成为一次输出。\",\"我曾经也觉得，最好的记忆方式是复现，俗话说就是你见得多了自然而然就记住了。这也确实是一种记忆方法，但是他并不高效。如果你想通过复现的方式记住一个东西，那你必须要见这个东西很多次才能记住。（或者你是过目不忘的超强记忆力选手）。然后有些时候我们并没有那么多机会去见一个东西很多次。大多数情况下，我们只会见这个东西一次来记忆，然后很久以后需要用到的时候才会见第二次。往往在第二次见到的时候，我们就很难想起来这个东西到底是啥了。\",\"所以更高效的记忆方法就是输出。我今天刚刚尝试了一下输出的“魅力”，可以说记忆相当高效了。比如你要记一个东西，那你就在见他的第一次的时候，立马用你自己的话复述一遍。或者换一种方法，你直接不看这个东西默背一遍。然后你经过这个过程以后，你就会惊讶地发现，这个东西竟然你已经记得差不多了。（至于为什么没有完全记住，因为你可能会遗忘，所以需要时不时复习）。千万不要觉得这个过程很浪费时间或者很痛苦，想想你这样做了以后，会拥有超越常人的记忆力，能够做到无论什么事情都能在第一次见面就记得比较牢固，并且一定会减少以后再复习的时间。我觉得输出能够记忆更高效的原因，在于你输出的过程中，是在脑子里面检索你的知识存储区。区别于复现的直接从视觉上直接获取，从脑子里面检索知识区的方法显然并不容易，但一定会在检索的过程中增加更多“缓存”，缓存的多了，下次检索就更高效了，同样记忆的也更牢固了。\"]},\"8\":{\"h\":\"技术文章\",\"t\":[\"这里将介绍一些好玩的技术，以及我在学习一些知识过程中的总结，既是对自己的复习，也希望在自己的表述下能够帮到别人。(￣︶￣)↗\",\"目前收录了以下内容：\"]},\"9\":{\"h\":\"Java基础\"},\"10\":{\"h\":\"JavaScript基础\"},\"11\":{\"h\":\"Python基础\"},\"12\":{\"h\":\"Vue基础\"},\"13\":{\"h\":\"数据库\"},\"14\":{\"h\":\"数据结构与算法\",\"t\":[\"有些知识点非常零碎，是我自己的笔记，适合查缺补漏，请读者自行甄别。\",\"另外，善用搜索功能，有时候会事半功倍~\"]},\"15\":{\"h\":\"留言墙\",\"t\":[\"如果你对于这个网站有任何建议或者想法，都可以在下面提出来\",\"期待你的留言(*❦ω❦)\"]},\"16\":{\"h\":\"JavaScript基础零碎\",\"t\":[\"在函数外声明的变量具有全局作用于，在函数内部声明的变量只在函数内部有效\"]},\"17\":{\"h\":\"关于 和 的使用\"},\"18\":{\"h\":\"的用法\",\"t\":[\"在js中大括号 { }表示的是对象，里面的内容是对象的内容。并且对象的每一项都是由键值对组成的\",\"let person = { name='alice', age=30, };\",\"其中对象里面也可以嵌套复杂的数据结构\",\"let user = { name: \\\"Jane\\\", details: { address: \\\"123 Main St\\\", phone: \\\"555-1234\\\" } };\",\"在Vue.js中，组件的数据通常以对象的形式存在\",\"<script> export default{ data(){ return{ message: \\\"hello vue\\\", }; } }; </script>\"]},\"19\":{\"h\":\"的用法\",\"t\":[\"在js中，[]表示的是数组或列表\",\"let number = [1,2,3,4,5];\"]},\"20\":{\"h\":\"关于引号的区别\",\"t\":[\"一般而言，在js中单引号和双引号都可以引用字符串，但双引号的优点是可以嵌套单引号\",\"let sentence = \\\"He said, 'Hello, world!'\\\";\",\"而反引号的好处是可以进行插值\",\"let a = \\\"hello ${name}!\\\";\"]},\"21\":{\"h\":\"关于 和 的区别\"},\"22\":{\"h\":\"关于 和 区别\",\"t\":[\"两个等号：两个等号进行的是 宽松 比较（loose equality），在比较前会进行类型转换。如果两个值的类型不同，JavaScript 会尝试将它们转换为相同的类型，然后再进行比较。\",\"console.log(5 == '5'); // true，因为字符串 '5' 被转换成了数字 5 console.log(null == undefined); // true，因为 null 和 undefined 被认为相等 console.log('' == 0); // true，因为空字符串被转换成了数字 0 console.log('0' == false); // true，因为 '0' 被转换成了数字 0，而 false 也被转换成了数字 0\",\"三个等号：三个等号进行的是 严格 比较（strict equality），比较时不会进行类型转换，只有当两个值的类型和内容都相同时才会返回 true。\",\"console.log(5 === '5'); // false，因为类型不同，数字 5 和字符串 '5' 不相等 console.log(null === undefined); // false，因为类型不同 console.log('' === 0); // false，因为类型不同 console.log('0' === false); // false，因为类型不同\"]},\"23\":{\"h\":\"Java线程和线程锁\",\"t\":[\"[!note]今天面试一家小厂的时候问到Java线程锁了，这部分知识掌握还不太熟练，正好写一篇文章总结一下这部分内容\"]},\"24\":{\"h\":\"Java基础零碎\"},\"25\":{\"h\":\"语法基础\",\"t\":[\"Java的程序实际上是在虚拟机JVM上运行的，这就完美实现了可移植性，解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误\",\"Java中，每一个函数，实际上就是类中的方法。\",\"关于类似（2.0-1.1不等于0.9的问题）：浮点数采用二进制表示，而不是十进制。二进制中无法精确表示1/10，就像十进制无法精确表示1/3一样\",\"特殊字符的转移序列：\",\"- \\\\b 退格 - \\\\t 制表 - \\\\n 换行 - \\\\r 回车 - \\\\\\\" 双引号 - \\\\' 单引号 - \\\\\\\\ 反斜杠\",\"在Java中，x=0不能替换为boolern使用\",\"Java中用final修饰常量\",\"static final 修饰类变量，这个常量可以在一个类的多个方法中使用\",\"局部变量可以通过var修饰，不需要指明类型，但这并不是一种很好的编程方法\",\"输入时，采用Scanner对象进行输入，需要先创建一个Scanner对象，通过对象的方法读入\"]},\"26\":{\"h\":\"字符串\",\"t\":[\"String在java中是不可变类型的变量，对String类型的变量重新赋值，相当于将这个变量重新指向了另一个字符串，而不是修改了这个字符串。当两个字符串变量同时被赋值为一个字符串时，实际上他们同时指向一块字符串占据的内存。这个概念是不同于C/C++中的字符数组的。 并且如果对String类型的变量重新赋值，假如旧的字符串不被其他变量使用，那么就会被Java自动进行垃圾回收\",\"比较字符串时，尽量使用字符串的equals方法进行比较。因为equals比较的本质是比较字符串的字面量，而“=”比较的本质是看两个变量是否指向同一块内存。一般情况下他们得到的结果是相同的，但是+或者substring等操作得到的字符串，和另一个具有相同字面量的字符串变量就不指向同一块地址了。\",\"在字符串变量中，\\\"\\\"表示空串，也表示长度为0的字符串，但不表示null。也就是说null和\\\"\\\"是完全相异的概念\",\"String也是由char序列组成的，调用字符串的charAt(n)将返回位置n的代码单元，可以用这种方法遍历字符串\"]},\"27\":{\"h\":\"大数\",\"t\":[\"在java.math包里面有两个很有用的类：BigInteger和BigDecimal。这两个类可以处理包含任意长度数字序列的数值。\",\"BigInteger a = BigInteger.valueof(100); // 相对较小的数 BigInteger big = new BigInteger(\\\"6546512165165050650651\\\"); // 相对较大的数 BigInteger c = a.add(b); BigInteger d = c.multiply(b);\",\"java中没有运算符重载的功能，因此程序员不能够自定义运算符，只能用BigInteger中的方法进行运算\"]},\"28\":{\"h\":\"数组\",\"t\":[\"数组的长度一旦被确定了，就不能修改大小了。如果想要经常扩展数组的大小，那么就需要使用数组列表\",\"int [] a = new int[100];\",\"在java中，允许出现长度为0的数组，但并不是null\",\"java的数组初始化以后会自动填充默认值，而不是像C语言一样填充垃圾值\",\"for each循环语句中的循环变量会遍历数组元素中的每个元素，而不是下标值\",\"数组拷贝要用copyof方法\",\"int [] b = Arrays.copyof(a,a.length);\"]},\"29\":{\"h\":\"面向对象\",\"t\":[\"在Java中，对于对象的方法传递，并不是引用传递，而是按值传递。但是可以通过传递对象的方式修改对象的属性和值。\",\"在方法重载中，返回类型不是方法签名的一部分。也就是说不能有两个名字相同，参数类型相同，但有不同返回类型的方法。\",\"在一个构造器中可以使用this来调用另一个构造器\"]},\"30\":{\"h\":\"hashCode和equals方法\",\"t\":[\"hashCode方法返回对象的哈希码值，它是一个整数。哈希码通常用于散列表中的散列算法，例如Java中的 HashMap、HashSet等集合。\",\"equals方法用于判断两个对象是否相等。它是从 Object类继承而来的，默认实现是比较对象的内存地址。\",\"根据Java的规范，hashCode和 equals方法必须满足以下条件： \",\"如果两个对象相等（即 equals(Object obj) 返回 true），那么它们的哈希码值必须相等。即对于任何两个对象 a 和 b，如果 a.equals(b) 为 true，那么 a.hashCode() == b.hashCode() 也必须为 true。\",\"如果两个对象的哈希码值相等，它们并不一定相等。即对于任何两个对象 a 和 b，如果 a.hashCode() == b.hashCode() 为 true，a.equals(b) 不一定为 true。\",\"如果对象在equals比较中不相等，那么它们的hashCode值不要求一定不相等，但好的hashCode实现应该尽量避免这种情况。为了提高散列表的性能，不相等的对象尽量具有不同的哈希码值。\"]},\"31\":{\"h\":\"异常\",\"t\":[\"在Java编程中，异常分为两大类：****checked异常和unchecked异常。这两类异常的主要区别在于它们的处理方式以及在编译时和运行时的行为。下面是详细的解释：\"]},\"32\":{\"h\":\"Checked异常\"},\"33\":{\"h\":\"定义\",\"t\":[\"Checked异常是那些在编译时就必须处理的异常。这意味着，如果某个方法可能会抛出checked异常，那么该方法要么必须在方法签名中声明该异常，要么必须在方法体内通过try-catch块进行处理。\"]},\"34\":{\"h\":\"特点\",\"t\":[\"编译时检查：编译器会强制检查这些异常是否被处理。\",\"必须处理：如果不处理checked异常，代码将无法通过编译。\",\"典型例子：IOException, SQLException, ClassNotFoundException 等。\"]},\"35\":{\"h\":\"示例代码\",\"t\":[\"import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; public class CheckedExceptionExample { public static void main(String[] args) { try { File file = new File(\\\"non_existent_file.txt\\\"); FileReader fr = new FileReader(file); } catch (FileNotFoundException e) { e.printStackTrace(); } } }\",\"在上面的例子中，FileNotFoundException是一个checked异常，必须通过try-catch块处理，否则编译器会报错。\"]},\"36\":{\"h\":\"Unchecked异常\"},\"37\":{\"h\":\"定义\",\"t\":[\"Unchecked异常是那些在编译时不强制要求处理的异常。它们通常是由程序中的逻辑错误或程序员的疏忽引起的。这类异常在运行时才会抛出。\"]},\"38\":{\"h\":\"特点\",\"t\":[\"运行时检查：编译器不强制检查这些异常是否被处理。\",\"不强制处理：程序员可以选择处理或不处理unchecked异常。\",\"典型例子：NullPointerException, ArrayIndexOutOfBoundsException, ArithmeticException 等。\"]},\"39\":{\"h\":\"示例代码\",\"t\":[\"public class UncheckedExceptionExample { public static void main(String[] args) { int[] numbers = {1, 2, 3}; System.out.println(numbers[3]); // 这将抛出ArrayIndexOutOfBoundsException } }\",\"在上面的例子中，ArrayIndexOutOfBoundsException是一个unchecked异常，程序不会在编译时提醒处理这个异常，但它会在运行时抛出。\"]},\"40\":{\"h\":\"异常的继承关系\",\"t\":[\"在Java的异常层次结构中：\",\"java.lang.Throwable\",\"是所有异常的根类。\",\"java.lang.Exception\",\"是所有checked异常的父类。\",\"java.lang.RuntimeException是所有unchecked异常的父类。\",\"因此，checked异常是Exception的直接子类（但不包括 RuntimeException及其子类），而unchecked异常是 RuntimeException及其子类。\"]},\"41\":{\"h\":\"Iterable接口和Iteator接口\",\"t\":[\"用途： \",\"Iterable：定义一个集合可以被迭代，但不提供具体的迭代实现。实现 Iterable接口的类可以使用增强型for循环。\",\"Iterator：提供具体的迭代功能，可以在迭代过程中删除元素。\",\"方法： \",\"Iterable只有一个方法 iterator()，返回一个 Iterator对象。\",\"Iterator有三个方法：hasNext()，next()，和 remove()，用于遍历和修改集合。\",\"关系： \",\"实现Iterable接口的类必须提供一个 iterator()方法，该方法返回一个 Iterator对象。\",\"Iterator接口提供了实际的迭代行为，是遍历集合元素的工具。\"]},\"42\":{\"h\":\"python从入门到实践\"},\"43\":{\"h\":\"变量\",\"t\":[\"message=\\\"hello world\\\"\",\"并不需要指出变量类型\"]},\"44\":{\"h\":\"方法\",\"t\":[\"tittle()#以首字母大写的形式输出单词\",\"upper()#全部大写输出\",\"lower()#全部小写输出\",\"存储数据时经常使用lower，因为无法确保数据是大写还是小写\",\"rstrip()#输出删除字符串尾部多余的空格后的值 lstrip()#输出删除字符串头部多余的空格后的值 strip()#输出删除字符串两边多余的空格后的值\",\"从这里可以看出python对于数据和字符处理具有很多优势\",\"range(1,5,2)#从一到四找一个随机数,步长为2\",\"value**2#value的平方\"]},\"45\":{\"h\":\"字符串拼接\",\"t\":[\"message=\\\"hello world\\\" message2=\\\"python\\\" print(message.title()+\\\" \\\"+message2)\",\"直接通过加号的形式拼接\"]},\"46\":{\"h\":\"打印换行符和制表符\",\"t\":[\"\\\"\\\\t\\\"#制表符 \\\"\\\\n\\\"#换行符\",\"他们都相当于字符（串）\"]},\"47\":{\"h\":\"强转\",\"t\":[\"str(23)\",\"不强转会报错\"]},\"48\":{\"h\":\"注释\",\"t\":[\"用#而不是//\"]},\"49\":{\"h\":\"列表\"},\"50\":{\"h\":\"增加元素\",\"t\":[\"类似于数组，访问方式同数组\",\"append()#在列表末尾添加一个元素 str.append('a')\",\"insert()#在数组特定位置插入元素 str.insert(0,‘a')\"]},\"51\":{\"h\":\"按位置删除\",\"t\":[\"del str[0]#删除第0个元素\",\"str.pop(0)#删除某个位置的元素并返回，如果括号中不传参默认删除最后一个\"]},\"52\":{\"h\":\"按值删除\",\"t\":[\"str.remove(\\\"0\\\")#删除值为0的元素\"]},\"53\":{\"h\":\"排序\",\"t\":[\"str.sort()#正序,sort不能直接在print中调用 str.sort(reverse=True)#反序 sorted(str)#临时输出排序后的数组，不改变原数组顺序\"]},\"54\":{\"h\":\"反序\",\"t\":[\"str.reverse()#将数组倒序改变\"]},\"55\":{\"h\":\"数组长度\",\"t\":[\"len(a)#返回值为a的长度\",\"a[-1]#永远链接最后一个元素，除非a为空\"]},\"56\":{\"h\":\"列表推导式\"},\"57\":{\"h\":\"数学运算\",\"t\":[\"min(列表名),max(),sum()\"]},\"58\":{\"h\":\"列表格式操作\",\"t\":[\"number=list(range(1,5)) print(number) #list()转换为列表\"]},\"59\":{\"h\":\"列表解析\",\"t\":[\"square=[value**2 for value in range(1,10,2)] print(square)\"]},\"60\":{\"h\":\"切片\",\"t\":[\"print(square[0:3])\",\"截取0到3的部分\",\"print(square[-3:])\",\"只输出后三个元素\"]},\"61\":{\"h\":\"复制\",\"t\":[\"new_square=square[:]#类似于克隆\",\"new_square=square#类似于指针\"]},\"62\":{\"h\":\"元组\",\"t\":[\"定义：不可变的列表，区别在于用元括号而非方括号\",\"dimension=(1,100)\"]},\"63\":{\"h\":\"修改元组的唯一方式\",\"t\":[\"dimension=(1,100) print(dimension) dimension=(100,100) print(dimension)\",\"重新定义元组\"]},\"64\":{\"h\":\"循环\",\"t\":[\"for循环\",\"magicians=['alice','bob','dad'] for magician in magicians: print(magician)\",\"有C语言基础一秒看懂\",\"while循环使用方法同上\",\"while magician !=\\\"alice\\\":\",\"退出循环\",\"break continue\",\"用法同C语言\"]},\"65\":{\"h\":\"if条件\",\"t\":[\"if d==1: print(d)\",\"if d==1 and d-1==0: print(d)\",\"if d==1 or d-1==0: print(d)\",\"if 1 in dimension:#检查列表里面有没有某个元素 print(d)\",\"if 1 not in dimension:#检查列表里面没有某个元素 print(d)\",\"if 1 not in dimension:#三重条件判断 print(d) elif 100 in dimension: print(dimension) else: print(1)\",\"有C语言基础一秒看懂\",\"if birthday in pi: print(\\\"你的生日在圆周率里面\\\")\",\"py的这种方式让人感觉非常口语化\"]},\"66\":{\"h\":\"字典\",\"t\":[\"字典的作用在于索引，形式上区别在于大括号\",\"alien_0={'color':'green','point':'5'} print(alien_0['color'])\",\"字典的组成形式为一系列键值对，键值对之间用 , 隔开，键值对前为索引，后为值，通过 : 区分开.\",\"键值对索引可以是任何形式的变量，值也是\",\"alien_0['x_position']=100 #添加（修改）键值对 alien_0[\\\"y_position\\\"]=10 print(alien_0)\",\"del alien_0['x_position'] #删除键值对 print(alien_0)\",\"alien_0={1:'green','point':'5'} #遍历键值对（两种方法输出结果不一样 for point in alien_0.items(): print(point) print(alien_0)\",\"for key in alien_0.keys()://提取键 print(key)\",\"sorted(alien_0) #输出排序后的结果\",\"set() #输出集合后的结果\",\"字典嵌套\",\"alien_0={'1':'green','point':'5'} alien_1={'1':'green','point':'5'} alien_2={'1':'green','point':'5'} alien=[alien_0,alien_1,alien_2] print(alien)\",\"pizza={ '1':\\\"asd\\\", '2':[1,2,3] } print(pizza) print(pizza['2'])\"]},\"67\":{\"h\":\"输入\",\"t\":[\"message=input(\\\"hello\\\") print(message)\",\"结果是hello和输入的字符\",\"input相当于兼顾了C语言中printf和scanf的功能\",\"int('12') #将字符12强转为数字12\"]},\"68\":{\"h\":\"函数\",\"t\":[\"def greet(): print(\\\"hello\\\") greet()\",\"先定义，后使用，高度依赖换行和缩进\"]},\"69\":{\"h\":\"传参\",\"t\":[\"def greet(name): print(\\\"hello\\\"+' '+name) greet(input())\",\"上面为函数传参的使用\",\"两种传参方式：\",\"def greet(name): print(\\\"hello\\\"+' '+name) greet('bob') def greet(name): print(\\\"hello\\\"+' '+name) greet(name='bob')\",\"默认值，输入具体值以后会冲掉默认值\",\"def greet(name='bob'): print(\\\"hello\\\"+' '+name) greet()\",\"默认值和传参至少有一个，也就是说必须函数里面每个变量都有值\",\"返回值，有C语言基础一秒看懂，返回值类型任意\",\"def greet(name='bob'): print(\\\"hello\\\"+' '+name) return \\\"yes\\\" print(greet())\",\"传入多个参数\",\"def greet(*name): print(name) return \\\"yes\\\" print(greet('a','b'))\",\"得到的name是一个元组\",\"一个星号创建的是元组，两个星号创建的是字典，并且方式和建立有些不同\",\"def greet(**name): print(name) greet(asd='123')\"]},\"70\":{\"h\":\"导入包\"},\"71\":{\"h\":\"导入函数\",\"t\":[\"from g import greet greet(\\\"alice\\\")\"]},\"72\":{\"h\":\"导入文件\",\"t\":[\"import g g.greet(\\\"alice\\\")\"]},\"73\":{\"h\":\"别名\",\"t\":[\"import g as good good.greet(\\\"alice\\\")\"]},\"74\":{\"h\":\"类\",\"t\":[\"类是面向对象编程的具体形式，类中具有属性和方法\",\"类的基本声明：\",\"class Dog: def __init__(self,name,age): #self是必须的，剩下两个表示属性 self.name=name #对属性分别需要声明 self.age=age\",\"类里面的函数被称为方法，上面的_init__就是类里面的初始化方法（受markdown语法限制这里写法可能不太正确\",\"init的下划线是类里面的方法必须具备的，作为一个标志区别类里面的方法和类外面的函数\",\"实例化对象and访问对象（类相当于一个模板，可以根据一个类创建多个对象）\",\"my_dog=Dog('white',16) print(my_dog.name)\",\"默认属性\",\"class Dog: def __init__(self,name): self.name=name self.age=12 my_dog=Dog('white') print(my_dog.age)\",\"默认属性不需要再init的参数里面体现，在实例化的时候也不需要写出来，但是可以直接调用获取这个值和修改\"]},\"75\":{\"h\":\"继承关系\",\"t\":[\"class Dog: def __init__(self,name): self.name=name self.age=12 my_dog=Dog('white') my_dog.age=16 print(my_dog.age) class NBDog(Dog): def __init__(self,name): super().__init__(name)\",\"上述代码先定义了Dog这个类，并且给定了初始化的方法，接下来重新定义了NBDog，NBDog是继承Dog类的子类，所以在声明变量之前首先需要class NBDog(Dog)表示新的类是继承之前类的，super()表示调用父类的方法（父类也被称为超类），所以调用父类的init的方法进行初始化。\"]},\"76\":{\"h\":\"定义子类的属性\",\"t\":[\"class NBDog(Dog): def __init__(self,name): super().__init__(name) self.year=10 #新定义的子类的属性 my_NBdog=NBDog(\\\"black\\\") print(my_NBdog.year)\"]},\"77\":{\"h\":\"重写父类方法\",\"t\":[\"class Dog: def __init__(self,name): self.name=name self.age=12 def test(self): print(self.age) my_dog=Dog('white') my_dog.age=16 my_dog.test() class NBDog(Dog): def __init__(self,name): super().__init__(name) self.year=10 def test(self): print(f'my age is {self.age}') #这里要注意 my_NBdog=NBDog(\\\"black\\\") my_NBdog.test()\",\"直接再写一个覆盖了就行\",\"这段代码里面要注意最后一个print，这里输出以后{}中间的内容是年龄具体的变量值，f不会输出，他的作用是将大括号中的内容视为变量值，而不是都作为字符串输出\"]},\"78\":{\"h\":\"将类作为属性\",\"t\":[\"class Ear: def __init__(self,length): self.length=length class Dog: def __init__(self, name): self.name = name self.age = 12 self.ear=Ear(100); my_dog=Dog(\\\"black\\\") print(my_dog.ear.length)\",\"如上，Ear是dog的一部分，结果是100\"]},\"79\":{\"h\":\"导入类包\",\"t\":[\"from g import Car #导入方式 my_car=Car('tesla') print(my_car.name)\",\"from g import Car前后顺序不能互换\",\"导入多个类时，在Car后面加逗号然后加入别的类\",\"导入整个包，调用类时用点访问\",\"import g my_car=g.Car('tesla') print(my_car.name)\"]},\"80\":{\"h\":\"文件操作和异常\",\"t\":[\"读取文件操作\",\"with open(\\\"test.txt\\\") as hello: #打开文件，hello可以自定义变量名 contents=hello.read() #读取文件中的内容到contents中 print(contents) #打印出contents中的内容\",\"with的作用在于不需要手动关闭文件，表示在代码块中使用\",\"在读取文件后显示的实际上末尾会多出来一个空行，因为文件读取到末尾会返回一个空字符串，而打印出来显示的就是空行\",\"如果不想要这个空行的话可以使用print(contents.rstrip())来删除字符串末尾多余的空格或者换行\",\"py在文件查询的过程中，默认是在与代码文件相同目录的文件夹进行查询，如果需要对子文件进行查询，需要找到其子文件夹\",\"注意：在相对路径中，我们一般使用/这个斜杠，因为\\\\这个反斜杠会被认为是转义字符的标志，如果非要用\\\\这个斜杠的话，那就需要用两个\\\\斜杠，表示对每两个\\\\斜杠都转义为一个\\\\斜杠\",\"读取文件并逐行输出\",\"filename=\\\"test.txt\\\" with open(filename) as hello: for line in hello: print(line)\",\"读取文件内容并且存储到列表中\",\"filename=\\\"test.txt\\\" with open(filename) as hello: lines=hello.readlines() print(lines)\",\"写入文件\",\"filename=\\\"test.txt\\\" with open(filename,'w') as hello: hello.write(\\\"hello\\\")\",\"其中w表示写入模式，可以替换为r（读入模式），r+（读写模式），a（附加模式），如果忽略的话默认以只读模式打开\",\"如果文件原本并不存在的话，open函数将会自动创建一个以其命名的文件\",\"如果用w打开的话，文件内容会是新写入的内容，之前的内容会被清空\",\"如果想要附加的话，要用a模式\"]},\"81\":{\"h\":\"异常\",\"t\":[\"使用try和except组合来捕捉异常\",\"try: print(5/0) except: print(\\\"error\\\")\",\"实际上不同的异常，except后面应该接不同的异常，但是对于初学者可以直接都不用加，这样方便很多\",\"如果不需要任何东西的话，在except后接pass就行\"]},\"82\":{\"h\":\"杂项\",\"t\":[\"分析文本：\",\"title=\\\"alice in bob\\\" print(title.split())\",\"split方法表示根据空格分开文本，并且生成一个列表\"]},\"83\":{\"h\":\"json文件\"},\"84\":{\"h\":\"写入json文件\",\"t\":[\"import json numbers=[1,3,5,9,4,11] filename=\\\"numbers.json\\\" with open(filename,'w') as f: json.dump(numbers,f)\",\"json.dump函数接受两个参数，第一个是传入的内容，第二个是文件名\"]},\"85\":{\"h\":\"读取json文件\",\"t\":[\"import json filename=\\\"numbers.json\\\" with open(filename) as f: numbers=json.load(f) print(numbers)\",\"使用json.load函数来读取或存储json文件中的数据\"]},\"86\":{\"h\":\"重构\",\"t\":[\"将一整个函数分成多个子功能并且在需要时调用子功能\"]},\"87\":{\"h\":\"测试\",\"t\":[\"import unittest #导入单元测试的包 from name_function import get_formatted_name #导入要测试的函数 class NamesTestCase(unittest.TestCase): #创建一个Test的类，要继承unittest.TestCase表示单元测试 def test_first_last_name(self): formatted_name = get_formatted_name('janis', 'joplin') #后面是函数运行，前面用来接受返回的结果 self.assertEqual(formatted_name, 'Janis Joplin') #断言方法相当于一个比较，比较前后是否相等 if __name__ == '__main__': unittest.main()\",\"这个测试是单元测试，首先要导入单元测试的包，然后创建一个表示Test的类，接着定义一个方法，在方法中比较得到的结果与预期是否相符\",\"最后的if是判断特殊变量是不是main，也就是说目前存放代码的文件，是不是你要执行运行的文件，如果是的话，name的值就是main，然后执行后面的测试\",\"unnittest.main()函数每次都会先执行test_打头的函数，所以在定义测试函数的时候要注意函数的命名\"]},\"88\":{\"h\":\"常见的断言方法\",\"t\":[\"还有一个方法叫setup，在Test类中被优先调用。在测试自己编写的类时，方法setUp让测试方法编写起来更加容易：可以在setUp()方法中创建一系列实例并设置其属性，再在测试方法中直接使用这些实例。相比于在每个测试方法中都创建实例并设置属性，这种方法要更加容易。\"]},\"89\":{\"h\":\"Vue2基础零碎\",\"t\":[\"![warning] 本文介绍的是基于Vue2的基础零碎，主要介绍基本语法\"]},\"90\":{\"h\":\"Vue实例\",\"t\":[\"Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进Dom的系统：\",\"<div id=\\\"app\\\"> {{ message }} </div>\",\"var app = new Vue({ el: '#app', data: { message: 'Hello Vue!' } })\",\"这样我们就成功创建了第一个Vue应用\"]},\"91\":{\"h\":\"组件化应用\",\"t\":[\"Vue.component('todo-item'{ template:'<li>这是一个组件<li>' }) var app=new Vue(...)\",\"这样就注册好了一个组件，可以在另一段代码中使用\",\"<ol> <todo-item></todo-item> <ol>\",\"但是这样的缺点是每个待办项会被渲染相同的文本，也就是说组件里面的内容，一旦修改的话所有使用这个组件的地方都被修改了。我们往往需要定制修改一些东西，做法如下\",\"Vue.component('todo-item'{ props:['todo'], template:'<li>{{todo.text}}<li>', })\",\"我们引入了conponent中的一个属性：props，这样我们就可以使用v-bind指令将待办项传到循环输出的每个组件中：\",\"var app7=new Vue({ el:'app-7', data:{ gorceryList:[ {id:0,text:'蔬菜'}, {id:1,text:'奶酪'}, {id:2,text:'随便其他什么人吃的东西'} ] } }) <div id=\\\"app-7\\\"> <ol> <todo-item v-for=\\\"item in groceryList\\\" v-bind:todo=\\\"item\\\" v-bind:key=\\\"item.id\\\" ></todo-item> <ol> </div>\"]},\"92\":{\"h\":\"生命周期钩子\",\"t\":[\"在Vue实例化的过程中会有一个阶段，在不同的阶段会有不同的周期钩子，我们在钩子上挂载代码，从而帮助我们在不同的阶段执行不同的代码\",\"var app = new Vue{ created:function(){ console.log('我被创建了'); } }\",\"上面就是一个对于生命周期钩子用法的演示\",\"实际上的生命周期图如下：\",\"1714290772449\"]},\"93\":{\"h\":\"模板语法\"},\"94\":{\"h\":\"文本插值\",\"t\":[\"最常见的方法就是通过两个大括号插值\",\"<span>{{msg}}</span>\",\"当msg的property更新以后，对应文本内容就会改变\",\"<span v-once>{{msg}}</span>\",\"通过 v-once可以实现一次性差值，以后不会改变\"]},\"95\":{\"h\":\"html插值\",\"t\":[\"如果想要输出html的话，需要用v-html标签\",\"<span v-html=\\\"rawHtml\\\"></span>\",\"但实际上这样并不安全\"]},\"96\":{\"h\":\"Attribute插值\",\"t\":[\"可以使用 v-bind来将某些属性绑定到标签上\",\"<span v-bind:id=1></span> <button v-bind:name=\\\"alice\\\"></span>\"]},\"97\":{\"h\":\"指令\",\"t\":[\"指令就是v-开头的属性，前面的v-html和v-bind都是指令。\",\"<p v-if=\\\"seen\\\">现在你看到我了</p> <a v-bind:href=\\\"url\\\"></a> //点击跳转到某个链接 <button v-on:click=\\\"handle\\\"></button> //点击以后处理某个时间\",\"其实你可以看出来，v-bind:后面的东西，实际上就是你写html的时候的那些标签里面的属性，只不过换了一种方式\",\"[!tip] 部分指令是有缩写的，比如 v-bind:可以直接缩写为 :，v-on:可以直接缩写为 @\"]},\"98\":{\"h\":\"计算属性和侦听属性\"},\"99\":{\"h\":\"计算属性\",\"t\":[\"我们可以将一段代码提取到计算属性中\",\"<div id=\\\"example\\\"> <p>Original message: \\\"{{ message }}\\\"</p> <p>Computed reversed message: \\\"{{ reversedMessage }}\\\"</p> </div>\",\"var vm = new Vue({ el: '#example', data:{ message:'hello', }, computed:{ reversedMessage: function(){ return this.message.split:('').reverse().join('') } } })\",\"其中 computed就是计算属性，在里面创建了 reversedMessage，并实际上给他赋予了函数的返回值。当我们再次调用 vm.reversedMessage就得到了message的翻转\",\"[!note] 我们可以同样将计算属性转换为方法，他们得到的结果是相同的，但是不同的是计算属性是基于他们的响应式依赖进行缓存的。这就意味着只要message不变，那么 computed里面的东西就不会再次执行，但是如果使用方法的话每次都会重新执行一遍，所以相对来说计算属性更加高效\"]},\"100\":{\"h\":\"侦听器\",\"t\":[\"var vm = new Vue({ el: '#example', data:{ message:'hello', }, watch: { // 如果 `question` 发生改变，这个函数就会运行 question: function (newQuestion, oldQuestion) { this.answer = 'Waiting for you to stop typing...' this.debouncedGetAnswer() }, })\",\"实际上就是看某个变量有没有变化，如果变化了就执行这个函数\"]},\"101\":{\"h\":\"v-model\",\"t\":[\"v-model是vue中的一个非常重要的指令，用于在表单输入和应用状态之间建立双向绑定，可以确保表单输入的值和数据模型中的值保持同步。相当于同时绑定了 value属性和 input事件\",\"<template> <input v-model=\\\"message\\\" placeholder=\\\"输入一些文本\\\"> <p>输入的消息是: {{ message }}</p> </template> <script> export default { data() { return { message: '' } } } </script>\",\"这样的话输入的信息可以实时显示出来\"]},\"102\":{\"h\":\"组件\",\"t\":[\"组件的最大作用是可以复用，这也类似于函数或方法的复用，非常符合软件工程(#.#)\",\"// 引入Vue import Vue from 'vue'; // 引入组件 import MyComponent from './MyComponent.vue'; // 全局注册组件 Vue.component('my-component', { data: function () { return { count: 0 } }, template: '<button v-on:click=\\\"count++\\\">You clicked me {{ count }} times.</button>' }); // 创建Vue实例 new Vue({ el: '#app' });\",\"上述代码是对组件的全局注册，注册以后可以在任何地方使用，并且可以使用任意次数\",\"使用方法如下：\",\"<template> <div> <my-component></my-component> <!-- 其他内容 --> </div> </template>\",\"[!tip] 值得注意的是，在组件中的data必须是一个函数function，而不是直接返回变量和值\"]},\"103\":{\"h\":\"Vue3基础零碎\",\"t\":[\"[!note] 由于之前做项目需要Vue2，所以先学习了Vue2。但是Vue3同样也是值得学习的，尤其是具有了Vue2的基础以后，使用Vue3就更加得心应手了。\"]},\"104\":{\"h\":\"MySQL学习笔记\"},\"105\":{\"h\":\"Oracle和MySQL的区别\"},\"106\":{\"h\":\"Oracle数据库\",\"t\":[\"[!tip] 当我们学习一个新知识的时候，往往是先学会怎么用，然后再使用的过程中慢慢理解原理，这样也许不失为一种高效的学习方式\"]},\"107\":{\"h\":\"数据库语言的分类\",\"t\":[\"数据库语言一般分为四种\",\"DDL：数据库定义语言：create、drop\",\"DML：数据库操作语言：insert、update、delete\",\"DQL：数据库查询语言：select\",\"DCL：数据库控制语言：grant、revoke\",\"[!warning] 在数据库语言中，对大小写是不敏感的\"]},\"108\":{\"h\":\"Select语句的用法\",\"t\":[\"select column1,column2 from table1; //查询表中某几个列的数据 select * from table2; //查询表中所有列的数据\"]},\"109\":{\"h\":\"Order by子句\",\"t\":[\"select * from table1 order by id ASC; //查询结果根据id排序，其中ASC表示升序，DESC表示降序（不加ASC也默认是升序） select * from table1 order by id ASC NULLS FIRST;//如果出现了null，就将所有带有null的放到前面\"]},\"110\":{\"h\":\"Distinct子句\",\"t\":[\"select distinct column1 from table1; //过滤掉了column1中重复项后输出\"]},\"111\":{\"h\":\"Where子句\",\"t\":[\"select * from table1 where id = 1; //查询id为1的数据 select * from table2 where id = 1 and column1 = 'alice'; //查询id为1并且某一列是alice的数据 select * from table3 where id between 10 and 60; //查询id在10到60之间的数据 select * from table3 where id in(1,3); //查询id为1或者id为3的数据 select * from table4 where column1 like 'alic%'; //%是一个通配符，查询column1中值为alic开头的数据\"]},\"112\":{\"h\":\"And和Or子句\",\"t\":[\"And子句在上面介绍过，表示两个条件同时满足\",\"Or字句表示两个条件满足一个即可\",\"二者可以结合使用，可以多次使用\"]},\"113\":{\"h\":\"Fetch子句\",\"t\":[\"FETCH 子句在 Oracle 中可以用来限制查询返回的行数，但仅能在12c以上版本使用\",\"select * from table1 order by score fetch next 5 rows only; //获取前五行内容，其中的 next ... rows 可以替换为 first ... row select * from table2 order by score fetch next 5 rows with ties; //如果前五行之后有并列第五的，也会包含在内 select * from table3 order by score fetch next 5 percent rows only; //查询前5% select * from table4 order by score offset 10 rows fetch next 5 rows; //跳过前10之后的五行，实际上是11~15行\"]},\"114\":{\"h\":\"In子句\",\"t\":[\"基本用法上面已经介绍过了，这里说明一下还可用not in 以及执行子子语句\",\"select * from table1 where id in( select id from table1 where column1 = 'alice' ); //先执行里面的语句筛选出id，然后再进行外部的查询，查找id在in的范围里面的数据\"]},\"115\":{\"h\":\"Like子句\",\"t\":[\"前面已经有过样例了，这里介绍几个通配符\",\"% 代表0个或多个字符 alic%\",\"_ 代表一个字符 alic_\",\"[charlist] 字符表中的任意一个字符 [abc]lice 搜索alice blice clice\",\"[!charlist]或者[^charlist] 不在字符表中的任何一个字符 [ab] 排除alice blice\"]},\"116\":{\"h\":\"Redis学习笔记\"},\"117\":{\"h\":\"Redis是什么？\",\"t\":[\"Redis是一个非关系型数据库，它可以存储键（key）和五中不同类型的值（value）之间的映射，可以将存储在内存的 键值对 数据持久化 到硬盘，可以使用赋值特性来扩展读性能，还可以通过客户端分片来扩展写性能。\",\"因为Redis是存储在内存中的，所以他的读写效率相对于其他数据库较高。\",\"Redis的作用往往是用来存储热点数据的，比如磨某个数据某个时间段点击量比较高，就可以用Redis快速存取\"]},\"118\":{\"h\":\"Redis中常用的数据类型\",\"t\":[\"这里的数据类型特指value的数据类型\",\"字符串string\",\"哈希hash（类似于java中的HashMap）\",\"列表list（java中的LinkedList）\",\"集合set（无序集合，类似java中的HashSet）\",\"有序集合sorted set/zset（集合中每一个元素关联一个分数，根据分数进行排序，没有重复元素）\"]},\"119\":{\"h\":\"常用操作命令\",\"t\":[\"Redis中的命令也不区分大小写，和MySQL一样\"]},\"120\":{\"h\":\"字符串\",\"t\":[\"SET key value 设置指定key的值\",\"GET key 获取指定key的值\",\"SETEX key seconds value 设置key的值，并且指定过期时间\",\"SETNX key value 只有key不存在的时候才设置\"]},\"121\":{\"h\":\"哈希\",\"t\":[\"HSET key field value 将哈希表key中的字段field的值设为value\",\"HGET key field 获取存储在哈希表中指定字段的值\",\"HGET key field 删除key对应的field\",\"HKEYS key 获取哈希表中所有字段\",\"HVALS key 获取哈希表中所有的值\"]},\"122\":{\"h\":\"列表\",\"t\":[\"LPUSH key value1 [value2] 将一个或多个插入头部\",\"LRANGE key start stop获取列表指定范围的元素\",\"RPOP key 移除并获取尾部元素\",\"LLEN key 获取列表长度\"]},\"123\":{\"h\":\"集合\",\"t\":[\"SADD key member1 [member2] 向集合添加一个或多个成员\",\"SMEMBERS key 返回集合中的所有成员\",\"SCARD key 获取集合中的成员数\",\"SINTER key1 [key2] 返回给定所有集合的交集\",\"SUNION key1 [key2] 返回所有给定集合的并集\",\"SREM key member1 [member2] 删除集合中的元素\"]},\"124\":{\"h\":\"有序集合\",\"t\":[\"score是一个double类型的数，用来标识顺序\",\"ZADD key score1 member1 [score2 member2]\",\"ZRANGE key start stop [WITHSCORES] 通过索引区间返回集合成员\",\"ZINCRBY key increment member 给某个成员member加分数increment\",\"ZREM key member 删除某个成员\",\"zrange key 0 -1 显示所有内容\"]},\"125\":{\"h\":\"通用命令\",\"t\":[\"KEYS pattern 查找所有符合给定模式pattern的key\",\"EXISTS key 检查key存不存在\",\"TYPE key 返回key所存储的值的类型\",\"DEL key 删除key\",\"keys * 返回所有key\"]},\"126\":{\"h\":\"数据库三大范式\",\"t\":[\"第一范式是满足了原子性\",\"第二范式是消除了部分依赖\",\"第三范式是消除了传递依赖\"]},\"127\":{\"h\":\"第一范式\",\"t\":[\"第一范式是满足了原子性\",\"比如下面的表：\",\"学生ID\",\"姓名\",\"课程\",\"1\",\"张三\",\"数学, 英语\",\"2\",\"李四\",\"物理, 化学\",\"课程里面只能有一个数据，不能两个混杂，所以改成下面的表：\",\"学生ID\",\"姓名\",\"课程\",\"1\",\"张三\",\"数学\",\"1\",\"张三\",\"英语\",\"2\",\"李四\",\"物理\",\"2\",\"李四\",\"化学\",\"这样就满足了原子性，实现了第一范式\"]},\"128\":{\"h\":\"第二范式\",\"t\":[\"第二范式是消除了部分依赖\",\"什么是部分依赖呢？部分依赖就是C依赖AB，那么缺了A不行，缺了B也不行。\",\"给出下面的销售情况表\",\"OrderID\",\"CustomerID\",\"CustomerName\",\"ProductID\",\"ProductName\",\"Quantity\",\"Price\",\"1\",\"101\",\"Alice\",\"001\",\"Product A\",\"2\",\"10.00\",\"2\",\"102\",\"Bob\",\"002\",\"Product B\",\"5\",\"20.00\",\"...\",\"...\",\"...\",\"...\",\"...\",\"...\",\"...\",\"CustomerID 和 CustomerName 依赖于 OrderID，但它们实际上是属于客户信息。\",\"ProductID 和 ProductName 依赖于 OrderID，但它们实际上是属于产品信息。\",\"我们可以这样拆分：\",\"订单表\",\"OrderID\",\"CustomerID\",\"ProductID\",\"Quantity\",\"Price\",\"1\",\"101\",\"001\",\"2\",\"10.00\",\"2\",\"102\",\"002\",\"5\",\"20.00\",\"...\",\"...\",\"...\",\"...\",\"...\",\"这里，OrderID 是主键，CustomerID 和 ProductID 是外键，完全依赖于 OrderID。\",\"客户表\",\"CustomerID\",\"CustomerName\",\"101\",\"Alice\",\"102\",\"Bob\",\"...\",\"...\",\"这里，CustomerID 是主键，CustomerName 完全依赖于 CustomerID。\",\"产品表\",\"ProductID\",\"ProductName\",\"001\",\"Product A\",\"002\",\"Product B\",\"...\",\"...\",\"这里，ProductID 是主键，ProductName 完全依赖于 ProductID。\",\"这样就消除了部分依赖\"]},\"129\":{\"h\":\"第三范式\",\"t\":[\"第三范式是消除了传递依赖\",\"什么是传递依赖呢？A依赖于B，B最终还得依赖于C，其中C是表的主键，那么这就是一个传递依赖\",\"给出原始课程表：\",\"StudentID\",\"StudentName\",\"CourseID\",\"CourseName\",\"TeacherID\",\"TeacherName\",\"1\",\"Alice\",\"101\",\"Math\",\"1\",\"Mr. Smith\",\"1\",\"Alice\",\"102\",\"Science\",\"2\",\"Ms. Johnson\",\"2\",\"Bob\",\"101\",\"Math\",\"1\",\"Mr. Smith\",\"...\",\"...\",\"...\",\"...\",\"...\",\"...\",\"StudentName 依赖于 StudentID，这是一个部分依赖，因为它只依赖于主键的一部分。\",\"CourseName 和 TeacherName 依赖于 CourseID 和 TeacherID，这也是部分依赖。\",\"TeacherName 依赖于 CourseID，这是一个传递依赖，因为它通过 CourseID 间接依赖于 StudentID。\",\"对于这个表，我们这样拆分：\",\"学生表\",\"StudentID\",\"StudentName\",\"1\",\"Alice\",\"2\",\"Bob\",\"...\",\"...\",\"课程表\",\"CourseID\",\"CourseName\",\"101\",\"Math\",\"102\",\"Science\",\"...\",\"...\",\"教师表\",\"TeacherID\",\"TeacherName\",\"1\",\"Mr. Smith\",\"2\",\"Ms. Johnson\",\"...\",\"...\",\"选课表\",\"StudentID\",\"CourseID\",\"TeacherID\",\"1\",\"101\",\"1\",\"1\",\"102\",\"2\",\"2\",\"101\",\"1\",\"...\",\"...\",\"...\",\"从而实现：\",\"学生表只包含学生编号和姓名，消除了对课程编号的依赖。\",\"课程表只包含课程编号和课程名称，消除了对教师编号的依赖。\",\"教师表只包含教师编号和教师姓名。\",\"选课表将学生、课程和教师的关系连接起来，消除了传递依赖。\"]},\"130\":{\"h\":\"数据库语句学习\",\"t\":[\"摘要：文章主要内容是数据库语句的基本操作，以及一些基本的数据库标准库函数\",\"重点：SQL语句对大小写不敏感\"]},\"131\":{\"h\":\"数据库操作语句\",\"t\":[\"SELECT - 从数据库表中获取数据\",\"UPDATE - 更新数据库表中的数据\",\"DELETE - 从数据库表中删除数据\",\"INSERT INTO - 向数据库表中插入数据\"]},\"132\":{\"h\":\"字句与附加内容\",\"t\":[\"SELECT list1,list2 FROM table;//输出某几个表 SELECT * FROM table;//输出表中全部内容 SELECT DISTINCT list1 FROM table;//输出列中内容，但每个值只出现一次 SELECT * FROM table WHERE id=2;//查找id为2的那一行，注意等号为单个，并且如果查找内容非数值，需要加单引号eg:WHERE name='alice' SELECT * FROM table WHERE id=2 AND name='alice';//他的意思和你想的一样，同样的用法还有OR SELECT * FROM table ORDER by id;//查找以后的结果按照id正序输出\",\"INSERT INTO table(list1,list2) VALUES('alice','bob')\",\"UPDATE table SET list1='alice',list2='bob' WHERE id=1;\",\"DELETE FROM table WHERE id=1; DELETE * FROM table;\"]},\"133\":{\"h\":\"数据库定义语句\",\"t\":[\"CREATE DATABASE - 创建新数据库\",\"ALTER DATABASE - 修改数据库\",\"CREATE TABLE - 创建新表\",\"ALTER TABLE - 变更（改变）数据库表\",\"DROP TABLE - 删除表\",\"CREATE INDEX - 创建索引（搜索键）\",\"DROP INDEX - 删除索引\"]},\"134\":{\"h\":\"oracle数据库标准库函数（math库）（DML库-操作游标 json）\"},\"135\":{\"h\":\"1. 单行函数\"},\"136\":{\"h\":\"字符函数\",\"t\":[\"CONCAT('Hello', 'World'): 结果为 'HelloWorld'。\",\"SUBSTR('HelloWorld', 6, 5): 从第6位开始取5个字符，结果为 'World'。\",\"LENGTH('Hello'): 返回字符串 'Hello' 的长度，结果为 5。\",\"TRIM('H' FROM 'HHHelloHH'): 移除字符串两侧的 'H'，结果为 'Hello'。\",\"LOWER('HELLO'): 将字符串转换为小写，结果为 'hello'。\",\"UPPER('hello'): 将字符串转换为大写，结果为 'HELLO'。\",\"REPLACE('2024 Happy New Year', '2024', '2025'): 将字符串中的 2024 替换为 2025，结果为 '2025 Happy New Year'。\"]},\"137\":{\"h\":\"数值函数\",\"t\":[\"ROUND(123.4567, 2): 将 123.4567 四舍五入到小数点后2位，结果为 123.46。\",\"TRUNC(123.4567, 2): 将 123.4567 截断到小数点后2位，结果为 123.45。\",\"ABS(-123.45): 返回 -123.45 的绝对值，结果为 123.45。\",\"CEIL(123.45): 返回大于等于 123.45 的最小整数，结果为 124。\",\"FLOOR(123.45): 返回小于等于 123.45 的最大整数，结果为 123。\"]},\"138\":{\"h\":\"日期函数\",\"t\":[\"SYSDATE: 返回当前系统日期和时间，结果取决于系统时刻。\",\"ADD_MONTHS('01-JAN-2024', 1): 在日期 01-JAN-2024 上加1个月，结果为 01-FEB-2024。\",\"LAST_DAY('15-JAN-2024'): 返回 JAN-2024 的最后一天，结果为 31-JAN-2024。\",\"MONTHS_BETWEEN('01-JAN-2024', '01-MAR-2024'): 计算从 01-MAR-2024 到 01-JAN-2024 之间的月份差异，结果为 -2。\",\"NEXT_DAY('01-JAN-2024', 'FRIDAY'): 返回 01-JAN-2024 后的第一个星期五，日期取决于当年日历。\"]},\"139\":{\"h\":\"2. 聚合函数（详细）（三个不同）\",\"t\":[\"SUM(column): 计算某列的总和。例如，在收入列上使用，可以计算总收入。\",\"AVG(column): 计算某列的平均值。例如，计算所有员工的平均薪资。\",\"MAX(column): 找出某列的最大值。例如，找出最高的订单金额。\",\"MIN(column): 找出某列的最小值。例如，找出最低的库存量。\",\"COUNT(column): 计算某列的非空值数量。例如，计算有多少员工有邮箱地址。\"]},\"140\":{\"h\":\"3. 转换函数\",\"t\":[\"TO_CHAR(SYSDATE, 'YYYY-MM-DD'): 将当前日期转换为 'YYYY-MM-DD' 格式的字符串。\",\"TO_NUMBER('123.45', '999.99'): 将字符串 '123.45' 转换为数字。\",\"TO_DATE('01-JAN-2024', 'DD-MON-YYYY'): 将字符串 '01-JAN-2024' 转换为日期类型。\"]},\"141\":{\"h\":\"4. 分析函数\",\"t\":[\"ROW_NUMBER() OVER (ORDER BY salary DESC): 对所有员工按薪资降序排列，并给每个员工分配一个唯一的行号。\",\"RANK() OVER (ORDER BY score DESC): 在成绩表中，对学生的分数进行排名，相同分数的学生排名相同。\",\"DENSE_RANK() OVER (ORDER BY score DESC): 类似 RANK，但排名将连续不留空。\"]},\"142\":{\"h\":\"5. 空值处理函数（详细）\",\"t\":[\"NVL(NULL, 'default'): 如果第一个表达式是 NULL，返回 'default'。\",\"COALESCE(NULL, NULL, 'first_non_null'): 返回参数列表中的第一个非空表达式，结果为 'first_non_null'。\",\"NULLIF('A', 'B'): 如果两个表达式不相等，返回第一个表达式，结果为 'A'；如果相等，则返回 NULL。\"]},\"143\":{\"h\":\"MySQL数据库函数\"},\"144\":{\"h\":\"1. 字符串函数\",\"t\":[\"CONCAT(str1, str2, ...): 连接两个或多个字符串。例如：CONCAT('Hello', ' ', 'World') 返回 'Hello World'。\",\"LENGTH(str): 返回字符串的长度。例如：LENGTH('Hello') 返回 5。\",\"LOWER(str): 将字符串转换为小写。例如：LOWER('HELLO') 返回 'hello'。\",\"UPPER(str): 将字符串转换为大写。例如：UPPER('hello') 返回 'HELLO'。\",\"REPLACE(str, from_str, to_str): 在字符串中替换子串。例如：REPLACE('Hello World', 'World', 'MySQL') 返回 'Hello MySQL'。\",\"SUBSTRING(str, pos, len): 从字符串中提取子串。例如：SUBSTRING('Hello World', 7, 5) 返回 'World'。\",\"TRIM(str): 去除字符串两侧的空格。例如：TRIM(' Hello ') 返回 'Hello'。\"]},\"145\":{\"h\":\"2. 数值函数\",\"t\":[\"ROUND(number, decimals): 对数值进行四舍五入。例如：ROUND(123.4567, 2) 返回 123.46。\",\"FLOOR(number): 返回不大于数值的最大整数。例如：FLOOR(123.45) 返回 123。\",\"CEIL(number): 返回不小于数值的最小整数。例如：CEIL(123.45) 返回 124。\",\"ABS(number): 返回数值的绝对值。例如：ABS(-123) 返回 123。\"]},\"146\":{\"h\":\"3. 日期和时间函数\",\"t\":[\"CURDATE(): 返回当前日期。例如，如果今天是 2024-04-10，则 CURDATE() 返回 2024-04-10。\",\"NOW(): 返回当前日期和时间。例如，如果现在是 2024-04-10 12:34:56，则 NOW() 返回 2024-04-10 12:34:56。\",\"DATEDIFF(date1, date2): 返回两个日期之间的天数。例如：DATEDIFF('2024-04-10', '2024-04-01') 返回 9。\",\"DATE_ADD(date, INTERVAL expr type): 给定日期加上一个时间间隔。例如：DATE_ADD('2024-01-01', INTERVAL 1 MONTH) 返回 2024-02-01。\"]},\"147\":{\"h\":\"4. 条件表达式\",\"t\":[\"IF(expr1, expr2, expr3): 如果 expr1 为真，则返回 expr2；否则返回 expr3。例如：IF(1>0, 'true', 'false') 返回 'true'。\",\"CASE WHEN condition THEN result [WHEN ...] [ELSE result] END: 条件选择语句。例如：CASE WHEN 1>0 THEN 'true' ELSE 'false' END 返回 'true'。\"]},\"148\":{\"h\":\"5. 聚合函数\",\"t\":[\"SUM(column): 计算数值列的总和。例如，在销售表中，SUM(price) 可以计算总销售额。\",\"AVG(column): 计算数值列的平均值。例如：AVG(price) 可以计算平均销售价格。\",\"MAX(column): 返回列中的最大值。例如：MAX(price) 可以找到最高的销售价格。\",\"MIN(column): 返回列中的最小值。例如：MIN(price) 可以找到最低的销售价格。\",\"COUNT(column): 返回列中非NULL值的数量。例如：COUNT(*) 可以计算表中的行数。\"]},\"149\":{\"h\":\"6. 其他有用的函数\",\"t\":[\"COALESCE(value1, value2, ...): 返回参数列表中的第一个非NULL值。例如：COALESCE(NULL, NULL, 'first_non_null', NULL) 返回 'first_non_null'。\",\"NULLIF(value1, value2): 如果两个值相等则返回NULL，否则返回第一个值。例如：NULLIF('A', 'B') 返回 'A'；NULLIF('A', 'A') 返回 NULL。\"]},\"150\":{\"h\":\"PostgreSQL数据库函数\"},\"151\":{\"h\":\"1. 字符串函数\",\"t\":[\"CONCAT(str1, str2, ...): 连接两个或多个字符串。例如：CONCAT('Hello', ' ', 'World') 返回 'Hello World'。\",\"LENGTH(str): 返回字符串的长度。例如：LENGTH('Hello') 返回 5。\",\"LOWER(str): 将字符串转换为小写。例如：LOWER('HELLO') 返回 'hello'。\",\"UPPER(str): 将字符串转换为大写。例如：UPPER('hello') 返回 'HELLO'。\",\"REPLACE(str, from_str, to_str): 在字符串中替换子串。例如：REPLACE('Hello World', 'World', 'PostgreSQL') 返回 'Hello PostgreSQL'。\",\"SUBSTRING(str FROM start FOR length): 从字符串中提取子串。例如：SUBSTRING('Hello World' FROM 7 FOR 5) 返回 'World'。\",\"TRIM([LEADING | TRAILING | BOTH] [characters] FROM str): 去除字符串两侧的指定字符。例如：TRIM(' Hello ') 返回 'Hello'。\"]},\"152\":{\"h\":\"2. 数值函数\",\"t\":[\"ROUND(value, precision): 对数值进行四舍五入到指定的小数位数。例如：ROUND(123.4567, 2) 返回 123.46。\",\"FLOOR(value): 返回不大于数值的最大整数。例如：FLOOR(123.45) 返回 123。\",\"CEILING(value): 返回不小于数值的最小整数。例如：CEILING(123.45) 返回 124。\",\"ABS(value): 返回数值的绝对值。例如：ABS(-123) 返回 123。\"]},\"153\":{\"h\":\"3. 日期和时间函数\",\"t\":[\"CURRENT_DATE: 返回当前日期。例如：CURRENT_DATE。\",\"CURRENT_TIMESTAMP: 返回当前日期和时间。例如：CURRENT_TIMESTAMP。\",\"AGE(timestamp1, timestamp2): 返回两个日期之间的间隔。例如：AGE(TIMESTAMP '2024-04-10', TIMESTAMP '2024-01-01') 返回 '3 mons 9 days'。\",\"DATE_PART('field', timestamp): 提取日期的指定部分。例如：DATE_PART('year', TIMESTAMP '2024-04-10') 返回 2024。\"]},\"154\":{\"h\":\"4. 条件表达式\",\"t\":[\"CASE WHEN condition THEN result [WHEN ...] [ELSE result] END: 条件选择语句。例如：CASE WHEN 1>0 THEN 'true' ELSE 'false' END 返回 'true'。\",\"COALESCE(value1, value2, ...): 返回参数列表中的第一个非NULL值。例如：COALESCE(NULL, NULL, 'first_non_null', NULL) 返回 'first_non_null'。\",\"NULLIF(value1, value2): 如果两个值相等则返回NULL，否则返回第一个值。例如：NULLIF('A', 'B') 返回 'A'；NULLIF('A', 'A') 返回 NULL。\"]},\"155\":{\"h\":\"5. 聚合函数\",\"t\":[\"SUM(column): 计算数值列的总和。例如，SUM(price) 可以计算总销售额。\",\"AVG(column): 计算数值列的平均值。例如：AVG(price) 可以计算平均销售价格。\",\"MAX(column): 返回列中的最大值。例如：MAX(price) 可以找到最高的销售价格。\",\"MIN(column): 返回列中的最小值。例如：MIN(price) 可以找到最低的销售价格。\",\"COUNT(column): 返回列中非NULL值的数量。例如：COUNT(*) 可以计算表中的行数。\"]},\"156\":{\"h\":\"6. 数组函数\",\"t\":[\"ARRAY_LENGTH(array, dimension): 返回数组在指定维度的长度。例如：ARRAY_LENGTH(ARRAY[1,2,3,4], 1) 返回 4。\",\"ARRAY_APPEND(array, element): 向数组添加元素。例如：ARRAY_APPEND(ARRAY[1,2,3], 4) 返回 {1,2,3,4}。\"]},\"157\":{\"h\":\"7. 地理空间函数（GIS）\",\"t\":[\"ST_Area(geom): 计算地理对象的面积。例如：ST_Area(ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))')) 返回 1.0。\"]},\"158\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"159\":{\"h\":\"Java Script基础\"},\"160\":{\"h\":\"Java学习笔记\"},\"161\":{\"h\":\"Python学习笔记\"},\"162\":{\"h\":\"Vue基础\"},\"163\":{\"h\":\"数据库\"}},\"dirtCount\":0,\"index\":[[\"地理空间函数\",{\"0\":{\"157\":1}}],[\"去除字符串两侧的指定字符\",{\"1\":{\"151\":1}}],[\"去除字符串两侧的空格\",{\"1\":{\"144\":1}}],[\"条件选择语句\",{\"1\":{\"147\":1,\"154\":1}}],[\"条件表达式\",{\"0\":{\"147\":1,\"154\":1}}],[\"否则返回第一个值\",{\"1\":{\"149\":1,\"154\":1}}],[\"否则返回\",{\"1\":{\"147\":1}}],[\"否则编译器会报错\",{\"1\":{\"35\":1}}],[\"则\",{\"1\":{\"146\":2}}],[\"则返回\",{\"1\":{\"142\":1,\"147\":1}}],[\"连接两个或多个字符串\",{\"1\":{\"144\":1,\"151\":1}}],[\"空值处理函数\",{\"0\":{\"142\":1}}],[\"分析函数\",{\"0\":{\"141\":1}}],[\"分析文本\",{\"1\":{\"82\":1}}],[\"格式的字符串\",{\"1\":{\"140\":1}}],[\"转换为日期类型\",{\"1\":{\"140\":1}}],[\"转换为数字\",{\"1\":{\"140\":1}}],[\"转换为列表\",{\"1\":{\"58\":1}}],[\"转换函数\",{\"0\":{\"140\":1}}],[\"找出最低的库存量\",{\"1\":{\"139\":1}}],[\"找出最高的订单金额\",{\"1\":{\"139\":1}}],[\"找出某列的最小值\",{\"1\":{\"139\":1}}],[\"找出某列的最大值\",{\"1\":{\"139\":1}}],[\"例如\",{\"1\":{\"139\":5,\"144\":7,\"145\":4,\"146\":4,\"147\":2,\"148\":5,\"149\":2,\"151\":7,\"152\":4,\"153\":4,\"154\":3,\"155\":5,\"156\":2,\"157\":1}}],[\"例如java中的\",{\"1\":{\"30\":1}}],[\"详细\",{\"0\":{\"139\":1,\"142\":1}}],[\"聚合函数\",{\"0\":{\"139\":1,\"148\":1,\"155\":1}}],[\"日期和时间函数\",{\"0\":{\"146\":1,\"153\":1}}],[\"日期取决于当年日历\",{\"1\":{\"138\":1}}],[\"日期函数\",{\"0\":{\"138\":1}}],[\"到\",{\"1\":{\"138\":1}}],[\"到硬盘\",{\"1\":{\"117\":1}}],[\"计算地理对象的面积\",{\"1\":{\"157\":1}}],[\"计算数值列的平均值\",{\"1\":{\"148\":1,\"155\":1}}],[\"计算数值列的总和\",{\"1\":{\"148\":1,\"155\":1}}],[\"计算有多少员工有邮箱地址\",{\"1\":{\"139\":1}}],[\"计算所有员工的平均薪资\",{\"1\":{\"139\":1}}],[\"计算某列的非空值数量\",{\"1\":{\"139\":1}}],[\"计算某列的平均值\",{\"1\":{\"139\":1}}],[\"计算某列的总和\",{\"1\":{\"139\":1}}],[\"计算从\",{\"1\":{\"138\":1}}],[\"计算属性\",{\"0\":{\"99\":1}}],[\"计算属性和侦听属性\",{\"0\":{\"98\":1}}],[\"截断到小数点后2位\",{\"1\":{\"137\":1}}],[\"截取0到3的部分\",{\"1\":{\"60\":1}}],[\"四舍五入到小数点后2位\",{\"1\":{\"137\":1}}],[\"替换为\",{\"1\":{\"136\":1}}],[\"移除字符串两侧的\",{\"1\":{\"136\":1}}],[\"移除并获取尾部元素\",{\"1\":{\"122\":1}}],[\"结果取决于系统时刻\",{\"1\":{\"138\":1}}],[\"结果为\",{\"1\":{\"136\":7,\"137\":5,\"138\":3,\"142\":2}}],[\"结果是100\",{\"1\":{\"78\":1}}],[\"结果是hello和输入的字符\",{\"1\":{\"67\":1}}],[\"单行函数\",{\"0\":{\"135\":1}}],[\"单引号\",{\"1\":{\"25\":1}}],[\"操作游标\",{\"0\":{\"134\":1}}],[\"搜索键\",{\"1\":{\"133\":1}}],[\"搜索alice\",{\"1\":{\"115\":1}}],[\"改变\",{\"1\":{\"133\":1}}],[\"变更\",{\"1\":{\"133\":1}}],[\"变量\",{\"0\":{\"43\":1}}],[\"向数组添加元素\",{\"1\":{\"156\":1}}],[\"向数据库表中插入数据\",{\"1\":{\"131\":1}}],[\"向集合添加一个或多个成员\",{\"1\":{\"123\":1}}],[\"更新数据库表中的数据\",{\"1\":{\"131\":1}}],[\"摘要\",{\"1\":{\"130\":1}}],[\"消除了传递依赖\",{\"1\":{\"129\":1}}],[\"消除了对教师编号的依赖\",{\"1\":{\"129\":1}}],[\"消除了对课程编号的依赖\",{\"1\":{\"129\":1}}],[\"选课表将学生\",{\"1\":{\"129\":1}}],[\"选课表\",{\"1\":{\"129\":1}}],[\"教师表只包含教师编号和教师姓名\",{\"1\":{\"129\":1}}],[\"教师表\",{\"1\":{\"129\":1}}],[\"间接依赖于\",{\"1\":{\"129\":1}}],[\"什么是传递依赖呢\",{\"1\":{\"129\":1}}],[\"什么是部分依赖呢\",{\"1\":{\"128\":1}}],[\"产品表\",{\"1\":{\"128\":1}}],[\"客户表\",{\"1\":{\"128\":1}}],[\"完全依赖于\",{\"1\":{\"128\":3}}],[\"订单表\",{\"1\":{\"128\":1}}],[\"依赖于\",{\"1\":{\"128\":2,\"129\":3}}],[\"quantity\",{\"1\":{\"128\":2}}],[\"question\",{\"1\":{\"100\":1}}],[\"给定日期加上一个时间间隔\",{\"1\":{\"146\":1}}],[\"给出原始课程表\",{\"1\":{\"129\":1}}],[\"给出下面的销售情况表\",{\"1\":{\"128\":1}}],[\"给某个成员member加分数increment\",{\"1\":{\"124\":1}}],[\"缺了b也不行\",{\"1\":{\"128\":1}}],[\"部分依赖就是c依赖ab\",{\"1\":{\"128\":1}}],[\"部分指令是有缩写的\",{\"1\":{\"97\":1}}],[\"化学\",{\"1\":{\"127\":2}}],[\"物理\",{\"1\":{\"127\":2}}],[\"李四\",{\"1\":{\"127\":3}}],[\"英语\",{\"1\":{\"127\":2}}],[\"张三\",{\"1\":{\"127\":3}}],[\"课程和教师的关系连接起来\",{\"1\":{\"129\":1}}],[\"课程表只包含课程编号和课程名称\",{\"1\":{\"129\":1}}],[\"课程表\",{\"1\":{\"129\":1}}],[\"课程里面只能有一个数据\",{\"1\":{\"127\":1}}],[\"课程\",{\"1\":{\"127\":2}}],[\"姓名\",{\"1\":{\"127\":2}}],[\"学生表只包含学生编号和姓名\",{\"1\":{\"129\":1}}],[\"学生表\",{\"1\":{\"129\":1}}],[\"学生id\",{\"1\":{\"127\":2}}],[\"学习要有好的学习方法\",{\"1\":{\"6\":1}}],[\"学习方法\",{\"0\":{\"6\":1}}],[\"检查key存不存在\",{\"1\":{\"125\":1}}],[\"检查列表里面没有某个元素\",{\"1\":{\"65\":1}}],[\"检查列表里面有没有某个元素\",{\"1\":{\"65\":1}}],[\"通用命令\",{\"0\":{\"125\":1}}],[\"通过索引区间返回集合成员\",{\"1\":{\"124\":1}}],[\"通过\",{\"1\":{\"66\":1,\"94\":1}}],[\"通过对象的方法读入\",{\"1\":{\"25\":1}}],[\"通过你自己的方式表述一遍\",{\"1\":{\"7\":1}}],[\"显示所有内容\",{\"1\":{\"124\":1}}],[\"zrem\",{\"1\":{\"124\":1}}],[\"zrange\",{\"1\":{\"124\":2}}],[\"zincrby\",{\"1\":{\"124\":1}}],[\"zadd\",{\"1\":{\"124\":1}}],[\"zset\",{\"1\":{\"118\":1}}],[\"设置key的值\",{\"1\":{\"120\":1}}],[\"设置指定key的值\",{\"1\":{\"120\":1}}],[\"获取集合中的成员数\",{\"1\":{\"123\":1}}],[\"获取列表长度\",{\"1\":{\"122\":1}}],[\"获取哈希表中所有的值\",{\"1\":{\"121\":1}}],[\"获取哈希表中所有字段\",{\"1\":{\"121\":1}}],[\"获取存储在哈希表中指定字段的值\",{\"1\":{\"121\":1}}],[\"获取指定key的值\",{\"1\":{\"120\":1}}],[\"获取前五行内容\",{\"1\":{\"113\":1}}],[\"常用操作命令\",{\"0\":{\"119\":1}}],[\"常见的断言方法\",{\"0\":{\"88\":1}}],[\"没有重复元素\",{\"1\":{\"118\":1}}],[\"根据分数进行排序\",{\"1\":{\"118\":1}}],[\"根据java的规范\",{\"1\":{\"30\":1}}],[\"集合\",{\"0\":{\"123\":1}}],[\"集合中每一个元素关联一个分数\",{\"1\":{\"118\":1}}],[\"集合set\",{\"1\":{\"118\":1}}],[\"无序集合\",{\"1\":{\"118\":1}}],[\"哈希\",{\"0\":{\"121\":1}}],[\"哈希hash\",{\"1\":{\"118\":1}}],[\"哈希码通常用于散列表中的散列算法\",{\"1\":{\"30\":1}}],[\"还可以通过客户端分片来扩展写性能\",{\"1\":{\"117\":1}}],[\"还有一个方法叫setup\",{\"1\":{\"88\":1}}],[\"之间的月份差异\",{\"1\":{\"138\":1}}],[\"之间的映射\",{\"1\":{\"117\":1}}],[\"之前的内容会被清空\",{\"1\":{\"80\":1}}],[\"排除alice\",{\"1\":{\"115\":1}}],[\"排序\",{\"0\":{\"53\":1}}],[\"^charlist\",{\"1\":{\"115\":1}}],[\"代表一个字符\",{\"1\":{\"115\":1}}],[\"代表0个或多个字符\",{\"1\":{\"115\":1}}],[\"代码将无法通过编译\",{\"1\":{\"34\":1}}],[\"代码之外\",{\"0\":{\"4\":1}}],[\"查找以后的结果按照id正序输出\",{\"1\":{\"132\":1}}],[\"查找id为2的那一行\",{\"1\":{\"132\":1}}],[\"查找id在in的范围里面的数据\",{\"1\":{\"114\":1}}],[\"查找所有符合给定模式pattern的key\",{\"1\":{\"125\":1}}],[\"查询前5\",{\"1\":{\"113\":1}}],[\"查询column1中值为alic开头的数据\",{\"1\":{\"111\":1}}],[\"查询id在10到60之间的数据\",{\"1\":{\"111\":1}}],[\"查询id为1或者id为3的数据\",{\"1\":{\"111\":1}}],[\"查询id为1并且某一列是alice的数据\",{\"1\":{\"111\":1}}],[\"查询id为1的数据\",{\"1\":{\"111\":1}}],[\"查询结果根据id排序\",{\"1\":{\"109\":1}}],[\"查询表中所有列的数据\",{\"1\":{\"108\":1}}],[\"查询表中某几个列的数据\",{\"1\":{\"108\":1}}],[\"基本用法上面已经介绍过了\",{\"1\":{\"114\":1}}],[\"跳过前10之后的五行\",{\"1\":{\"113\":1}}],[\"中可以用来限制查询返回的行数\",{\"1\":{\"113\":1}}],[\"中间的内容是年龄具体的变量值\",{\"1\":{\"77\":1}}],[\"子句在\",{\"1\":{\"113\":1}}],[\"二者可以结合使用\",{\"1\":{\"112\":1}}],[\"二进制中无法精确表示1\",{\"1\":{\"25\":1}}],[\"6\",{\"0\":{\"149\":1,\"156\":1},\"1\":{\"136\":1}}],[\"60\",{\"1\":{\"111\":1}}],[\"6546512165165050650651\",{\"1\":{\"27\":1}}],[\"过滤掉了column1中重复项后输出\",{\"1\":{\"110\":1}}],[\"往往是先学会怎么用\",{\"1\":{\"106\":1}}],[\"往往在第二次见到的时候\",{\"1\":{\"7\":1}}],[\"尤其是具有了vue2的基础以后\",{\"1\":{\"103\":1}}],[\"由于之前做项目需要vue2\",{\"1\":{\"103\":1}}],[\"值得注意的是\",{\"1\":{\"102\":1}}],[\"值也是\",{\"1\":{\"66\":1}}],[\"创建索引\",{\"1\":{\"133\":1}}],[\"创建新表\",{\"1\":{\"133\":1}}],[\"创建新数据库\",{\"1\":{\"133\":1}}],[\"创建vue实例\",{\"1\":{\"102\":1}}],[\"创建一个test的类\",{\"1\":{\"87\":1}}],[\"全局注册组件\",{\"1\":{\"102\":1}}],[\"全部小写输出\",{\"1\":{\"44\":1}}],[\"全部大写输出\",{\"1\":{\"44\":1}}],[\"引入组件\",{\"1\":{\"102\":1}}],[\"引入vue\",{\"1\":{\"102\":1}}],[\"非常符合软件工程\",{\"1\":{\"102\":1}}],[\"发生改变\",{\"1\":{\"100\":1}}],[\"`question`\",{\"1\":{\"100\":1}}],[\"侦听器\",{\"0\":{\"100\":1}}],[\"其他有用的函数\",{\"0\":{\"149\":1}}],[\"其他内容\",{\"1\":{\"102\":1}}],[\"其实你可以看出来\",{\"1\":{\"97\":1}}],[\"其中c是表的主键\",{\"1\":{\"129\":1}}],[\"其中的\",{\"1\":{\"113\":1}}],[\"其中asc表示升序\",{\"1\":{\"109\":1}}],[\"其中\",{\"1\":{\"99\":1}}],[\"其中w表示写入模式\",{\"1\":{\"80\":1}}],[\"其中对象里面也可以嵌套复杂的数据结构\",{\"1\":{\"18\":1}}],[\"点击以后处理某个时间\",{\"1\":{\"97\":1}}],[\"点击跳转到某个链接\",{\"1\":{\"97\":1}}],[\"前面已经有过样例了\",{\"1\":{\"115\":1}}],[\"前面的v\",{\"1\":{\"97\":1}}],[\"前面用来接受返回的结果\",{\"1\":{\"87\":1}}],[\"开头的属性\",{\"1\":{\"97\":1}}],[\"指令就是v\",{\"1\":{\"97\":1}}],[\"指令\",{\"0\":{\"97\":1}}],[\"文章主要内容是数据库语句的基本操作\",{\"1\":{\"130\":1}}],[\"文本插值\",{\"0\":{\"94\":1}}],[\"文件内容会是新写入的内容\",{\"1\":{\"80\":1}}],[\"文件操作和异常\",{\"0\":{\"80\":1}}],[\"模板语法\",{\"0\":{\"93\":1}}],[\"生命周期钩子\",{\"0\":{\"92\":1}}],[\"随便其他什么人吃的东西\",{\"1\":{\"91\":1}}],[\"奶酪\",{\"1\":{\"91\":1}}],[\"蔬菜\",{\"1\":{\"91\":1}}],[\"7\",{\"0\":{\"157\":1},\"1\":{\"91\":2,\"144\":1,\"151\":1}}],[\"做法如下\",{\"1\":{\"91\":1}}],[\"做这个网站的初心是记录我个人学习过程中的总结和经验分享\",{\"1\":{\"3\":1}}],[\"组件的最大作用是可以复用\",{\"1\":{\"102\":1}}],[\"组件的数据通常以对象的形式存在\",{\"1\":{\"18\":1}}],[\"组件\",{\"0\":{\"102\":1}}],[\"组件化应用\",{\"0\":{\"91\":1}}],[\">you\",{\"1\":{\"102\":1}}],[\">现在你看到我了<\",{\"1\":{\"97\":1}}],[\"><\",{\"1\":{\"91\":1,\"95\":1,\"96\":1,\"97\":2}}],[\">\",{\"1\":{\"90\":1,\"91\":1,\"99\":1,\"101\":1,\"102\":1}}],[\"主要介绍基本语法\",{\"1\":{\"89\":1}}],[\"本文介绍的是基于vue2的基础零碎\",{\"1\":{\"89\":1}}],[\"再在测试方法中直接使用这些实例\",{\"1\":{\"88\":1}}],[\"最常见的方法就是通过两个大括号插值\",{\"1\":{\"94\":1}}],[\"最后的if是判断特殊变量是不是main\",{\"1\":{\"87\":1}}],[\"最好的记忆方式是复现\",{\"1\":{\"7\":1}}],[\"接着定义一个方法\",{\"1\":{\"87\":1}}],[\"接下来重新定义了nbdog\",{\"1\":{\"75\":1}}],[\"首先要导入单元测试的包\",{\"1\":{\"87\":1}}],[\"断言方法相当于一个比较\",{\"1\":{\"87\":1}}],[\"测试\",{\"0\":{\"87\":1}}],[\"使用vue3就更加得心应手了\",{\"1\":{\"103\":1}}],[\"使用方法如下\",{\"1\":{\"102\":1}}],[\"使用json\",{\"1\":{\"85\":1}}],[\"使用try和except组合来捕捉异常\",{\"1\":{\"81\":1}}],[\"第三范式\",{\"0\":{\"129\":1}}],[\"第三范式是消除了传递依赖\",{\"1\":{\"126\":1,\"129\":1}}],[\"第二范式\",{\"0\":{\"128\":1}}],[\"第二范式是消除了部分依赖\",{\"1\":{\"126\":1,\"128\":1}}],[\"第二个是文件名\",{\"1\":{\"84\":1}}],[\"第一范式\",{\"0\":{\"127\":1}}],[\"第一范式是满足了原子性\",{\"1\":{\"126\":1,\"127\":1}}],[\"第一个是传入的内容\",{\"1\":{\"84\":1}}],[\"99\",{\"1\":{\"140\":1}}],[\"999\",{\"1\":{\"140\":1}}],[\"9\",{\"1\":{\"84\":1,\"146\":1,\"153\":1}}],[\"9的问题\",{\"1\":{\"25\":1}}],[\"写入json文件\",{\"0\":{\"84\":1}}],[\"写入文件\",{\"1\":{\"80\":1}}],[\"杂项\",{\"0\":{\"82\":1}}],[\"附加模式\",{\"1\":{\"80\":1}}],[\"读取json文件\",{\"0\":{\"85\":1}}],[\"读取文件内容并且存储到列表中\",{\"1\":{\"80\":1}}],[\"读取文件并逐行输出\",{\"1\":{\"80\":1}}],[\"读取文件中的内容到contents中\",{\"1\":{\"80\":1}}],[\"读取文件操作\",{\"1\":{\"80\":1}}],[\"读写模式\",{\"1\":{\"80\":1}}],[\"读入模式\",{\"1\":{\"80\":1}}],[\"斜杠都转义为一个\",{\"1\":{\"80\":1}}],[\"斜杠\",{\"1\":{\"80\":2}}],[\"注册以后可以在任何地方使用\",{\"1\":{\"102\":1}}],[\"注意等号为单个\",{\"1\":{\"132\":1}}],[\"注意\",{\"1\":{\"80\":1}}],[\"注释\",{\"0\":{\"48\":1}}],[\"需要加单引号eg\",{\"1\":{\"132\":1}}],[\"需要用v\",{\"1\":{\"95\":1}}],[\"需要找到其子文件夹\",{\"1\":{\"80\":1}}],[\"需要先创建一个scanner对象\",{\"1\":{\"25\":1}}],[\"来删除字符串末尾多余的空格或者换行\",{\"1\":{\"80\":1}}],[\"打头的函数\",{\"1\":{\"87\":1}}],[\"打印出contents中的内容\",{\"1\":{\"80\":1}}],[\"打印换行符和制表符\",{\"0\":{\"46\":1}}],[\"打开文件\",{\"1\":{\"80\":1}}],[\"调用类时用点访问\",{\"1\":{\"79\":1}}],[\"调用字符串的charat\",{\"1\":{\"26\":1}}],[\"如上\",{\"1\":{\"78\":1}}],[\"如果现在是\",{\"1\":{\"146\":1}}],[\"如果今天是\",{\"1\":{\"146\":1}}],[\"如果相等\",{\"1\":{\"142\":1}}],[\"如果第一个表达式是\",{\"1\":{\"142\":1}}],[\"如果前五行之后有并列第五的\",{\"1\":{\"113\":1}}],[\"如果出现了null\",{\"1\":{\"109\":1}}],[\"如果变化了就执行这个函数\",{\"1\":{\"100\":1}}],[\"如果是的话\",{\"1\":{\"87\":1}}],[\"如果想要输出html的话\",{\"1\":{\"95\":1}}],[\"如果想要附加的话\",{\"1\":{\"80\":1}}],[\"如果想要经常扩展数组的大小\",{\"1\":{\"28\":1}}],[\"如果用w打开的话\",{\"1\":{\"80\":1}}],[\"如果文件原本并不存在的话\",{\"1\":{\"80\":1}}],[\"如果忽略的话默认以只读模式打开\",{\"1\":{\"80\":1}}],[\"如果非要用\",{\"1\":{\"80\":1}}],[\"如果需要对子文件进行查询\",{\"1\":{\"80\":1}}],[\"如果不需要任何东西的话\",{\"1\":{\"81\":1}}],[\"如果不想要这个空行的话可以使用print\",{\"1\":{\"80\":1}}],[\"如果不处理checked异常\",{\"1\":{\"34\":1}}],[\"如果括号中不传参默认删除最后一个\",{\"1\":{\"51\":1}}],[\"如果某个方法可能会抛出checked异常\",{\"1\":{\"33\":1}}],[\"如果对象在equals比较中不相等\",{\"1\":{\"30\":1}}],[\"如果\",{\"1\":{\"30\":2,\"100\":1,\"147\":1}}],[\"如果两个值相等则返回null\",{\"1\":{\"149\":1,\"154\":1}}],[\"如果两个值的类型不同\",{\"1\":{\"22\":1}}],[\"如果两个表达式不相等\",{\"1\":{\"142\":1}}],[\"如果两个对象的哈希码值相等\",{\"1\":{\"30\":1}}],[\"如果两个对象相等\",{\"1\":{\"30\":1}}],[\"如果你对于这个网站有任何建议或者想法\",{\"1\":{\"15\":1}}],[\"如果你想通过复现的方式记住一个东西\",{\"1\":{\"7\":1}}],[\"如果你能在阅读我的笔记的同时收获一些感悟\",{\"1\":{\"3\":1}}],[\"如果能够顺利完成的话\",{\"1\":{\"5\":1}}],[\"他的意思和你想的一样\",{\"1\":{\"132\":1}}],[\"他的作用是将大括号中的内容视为变量值\",{\"1\":{\"77\":1}}],[\"他们得到的结果是相同的\",{\"1\":{\"99\":1}}],[\"他们都相当于字符\",{\"1\":{\"46\":1}}],[\"直接再写一个覆盖了就行\",{\"1\":{\"77\":1}}],[\"直接通过加号的形式拼接\",{\"1\":{\"45\":1}}],[\"重点\",{\"1\":{\"130\":1}}],[\"重构\",{\"0\":{\"86\":1}}],[\"重写父类方法\",{\"0\":{\"77\":1}}],[\"重新定义元组\",{\"1\":{\"63\":1}}],[\"新定义的子类的属性\",{\"1\":{\"76\":1}}],[\"父类也被称为超类\",{\"1\":{\"75\":1}}],[\"上加1个月\",{\"1\":{\"138\":1}}],[\"上述代码是对组件的全局注册\",{\"1\":{\"102\":1}}],[\"上述代码先定义了dog这个类\",{\"1\":{\"75\":1}}],[\"上面就是一个对于生命周期钩子用法的演示\",{\"1\":{\"92\":1}}],[\"上面的\",{\"1\":{\"74\":1}}],[\"上面为函数传参的使用\",{\"1\":{\"69\":1}}],[\"继承关系\",{\"0\":{\"75\":1}}],[\"作为一个标志区别类里面的方法和类外面的函数\",{\"1\":{\"74\":1}}],[\"受markdown语法限制这里写法可能不太正确\",{\"1\":{\"74\":1}}],[\"剩下两个表示属性\",{\"1\":{\"74\":1}}],[\"类似\",{\"1\":{\"141\":1}}],[\"类似java中的hashset\",{\"1\":{\"118\":1}}],[\"类似于java中的hashmap\",{\"1\":{\"118\":1}}],[\"类似于指针\",{\"1\":{\"61\":1}}],[\"类似于克隆\",{\"1\":{\"61\":1}}],[\"类似于数组\",{\"1\":{\"50\":1}}],[\"类相当于一个模板\",{\"1\":{\"74\":1}}],[\"类里面的函数被称为方法\",{\"1\":{\"74\":1}}],[\"类的基本声明\",{\"1\":{\"74\":1}}],[\"类中具有属性和方法\",{\"1\":{\"74\":1}}],[\"类是面向对象编程的具体形式\",{\"1\":{\"74\":1}}],[\"类\",{\"0\":{\"74\":1}}],[\"别名\",{\"0\":{\"73\":1}}],[\"geomfromtext\",{\"1\":{\"157\":1}}],[\"geom\",{\"1\":{\"157\":1}}],[\"get\",{\"1\":{\"87\":2,\"120\":1}}],[\"gis\",{\"0\":{\"157\":1}}],[\"grant\",{\"1\":{\"107\":1}}],[\"grocerylist\",{\"1\":{\"91\":1}}],[\"greet\",{\"1\":{\"68\":2,\"69\":14,\"71\":2,\"72\":1,\"73\":1}}],[\"green\",{\"1\":{\"66\":5}}],[\"gorcerylist\",{\"1\":{\"91\":1}}],[\"good\",{\"1\":{\"73\":2}}],[\"g\",{\"1\":{\"71\":1,\"72\":2,\"73\":1,\"79\":3}}],[\"导入要测试的函数\",{\"1\":{\"87\":1}}],[\"导入单元测试的包\",{\"1\":{\"87\":1}}],[\"导入整个包\",{\"1\":{\"79\":1}}],[\"导入多个类时\",{\"1\":{\"79\":1}}],[\"导入方式\",{\"1\":{\"79\":1}}],[\"导入类包\",{\"0\":{\"79\":1}}],[\"导入文件\",{\"0\":{\"72\":1}}],[\"导入函数\",{\"0\":{\"71\":1}}],[\"导入包\",{\"0\":{\"70\":1}}],[\"得到的name是一个元组\",{\"1\":{\"69\":1}}],[\"传入多个参数\",{\"1\":{\"69\":1}}],[\"传参\",{\"0\":{\"69\":1}}],[\"默认是在与代码文件相同目录的文件夹进行查询\",{\"1\":{\"80\":1}}],[\"默认属性不需要再init的参数里面体现\",{\"1\":{\"74\":1}}],[\"默认属性\",{\"1\":{\"74\":1}}],[\"默认值和传参至少有一个\",{\"1\":{\"69\":1}}],[\"默认值\",{\"1\":{\"69\":1}}],[\"默认实现是比较对象的内存地址\",{\"1\":{\"30\":1}}],[\"高度依赖换行和缩进\",{\"1\":{\"68\":1}}],[\"先执行里面的语句筛选出id\",{\"1\":{\"114\":1}}],[\"先定义\",{\"1\":{\"68\":1}}],[\"先在公司工作一段时间\",{\"1\":{\"5\":1}}],[\"函数每次都会先执行test\",{\"1\":{\"87\":1}}],[\"函数\",{\"0\":{\"68\":1}}],[\"提取日期的指定部分\",{\"1\":{\"153\":1}}],[\"提取键\",{\"1\":{\"66\":1}}],[\"提供具体的迭代功能\",{\"1\":{\"41\":1}}],[\"key2\",{\"1\":{\"123\":2}}],[\"key1\",{\"1\":{\"123\":2}}],[\"key=\",{\"1\":{\"91\":1}}],[\"keys\",{\"1\":{\"66\":1,\"125\":2}}],[\"key\",{\"1\":{\"66\":2,\"117\":1,\"120\":4,\"121\":5,\"122\":4,\"123\":4,\"124\":5,\"125\":3}}],[\"两个星号创建的是字典\",{\"1\":{\"69\":1}}],[\"两个等号进行的是\",{\"1\":{\"22\":1}}],[\"两个等号\",{\"1\":{\"22\":1}}],[\"两种传参方式\",{\"1\":{\"69\":1}}],[\"两种方法输出结果不一样\",{\"1\":{\"66\":1}}],[\"遍历键值对\",{\"1\":{\"66\":1}}],[\"yyyy\",{\"1\":{\"140\":3}}],[\"you\",{\"1\":{\"100\":1}}],[\"year\",{\"1\":{\"76\":1,\"136\":2,\"153\":1}}],[\"year=10\",{\"1\":{\"76\":1,\"77\":1}}],[\"yes\",{\"1\":{\"69\":2}}],[\"y\",{\"1\":{\"66\":1}}],[\"添加\",{\"1\":{\"66\":1}}],[\"x\",{\"1\":{\"66\":2}}],[\"x=0不能替换为boolern使用\",{\"1\":{\"25\":1}}],[\"区分开\",{\"1\":{\"66\":1}}],[\"区别在于用元括号而非方括号\",{\"1\":{\"62\":1}}],[\"区别\",{\"0\":{\"22\":1}}],[\"区别于复现的直接从视觉上直接获取\",{\"1\":{\"7\":1}}],[\"后的第一个星期五\",{\"1\":{\"138\":1}}],[\"后面的东西\",{\"1\":{\"97\":1}}],[\"后面是函数运行\",{\"1\":{\"87\":1}}],[\"后使用\",{\"1\":{\"68\":1}}],[\"后为值\",{\"1\":{\"66\":1}}],[\"后来借助大厂的跳板到了美国亚马逊工作\",{\"1\":{\"5\":1}}],[\"后来转型做一业和服务的业务\",{\"1\":{\"5\":1}}],[\"后来老师决定自己创业\",{\"1\":{\"5\":1}}],[\"键值对\",{\"1\":{\"66\":1,\"117\":1}}],[\"键值对索引可以是任何形式的变量\",{\"1\":{\"66\":1}}],[\"键值对前为索引\",{\"1\":{\"66\":1}}],[\"键值对之间用\",{\"1\":{\"66\":1}}],[\"隔开\",{\"1\":{\"66\":1}}],[\"形式上区别在于大括号\",{\"1\":{\"66\":1}}],[\"字句与附加内容\",{\"0\":{\"132\":1}}],[\"字符函数\",{\"0\":{\"136\":1}}],[\"字符表中的任意一个字符\",{\"1\":{\"115\":1}}],[\"字符串函数\",{\"0\":{\"144\":1,\"151\":1}}],[\"字符串string\",{\"1\":{\"118\":1}}],[\"字符串拼接\",{\"0\":{\"45\":1}}],[\"字符串\",{\"0\":{\"26\":1,\"120\":1}}],[\"字典嵌套\",{\"1\":{\"66\":1}}],[\"字典的组成形式为一系列键值对\",{\"1\":{\"66\":1}}],[\"字典的作用在于索引\",{\"1\":{\"66\":1}}],[\"字典\",{\"0\":{\"66\":1}}],[\"三个不同\",{\"0\":{\"139\":1}}],[\"三个等号进行的是\",{\"1\":{\"22\":1}}],[\"三个等号\",{\"1\":{\"22\":1}}],[\"三重条件判断\",{\"1\":{\"65\":1}}],[\"退出循环\",{\"1\":{\"64\":1}}],[\"退格\",{\"1\":{\"25\":1}}],[\"循环\",{\"0\":{\"64\":1}}],[\"修改数据库\",{\"1\":{\"133\":1}}],[\"修改\",{\"1\":{\"66\":1}}],[\"修改元组的唯一方式\",{\"0\":{\"63\":1}}],[\"修饰类变量\",{\"1\":{\"25\":1}}],[\"元组\",{\"0\":{\"62\":1}}],[\"复制\",{\"0\":{\"61\":1}}],[\"切片\",{\"0\":{\"60\":1}}],[\"除非a为空\",{\"1\":{\"55\":1}}],[\"永远链接最后一个元素\",{\"1\":{\"55\":1}}],[\"临时输出排序后的数组\",{\"1\":{\"53\":1}}],[\"反序\",{\"0\":{\"54\":1},\"1\":{\"53\":1}}],[\"反斜杠\",{\"1\":{\"25\":1}}],[\"正序\",{\"1\":{\"53\":1}}],[\"正好写一篇文章总结一下这部分内容\",{\"1\":{\"23\":1}}],[\"按值删除\",{\"0\":{\"52\":1}}],[\"按位置删除\",{\"0\":{\"51\":1}}],[\"删除索引\",{\"1\":{\"133\":1}}],[\"删除表\",{\"1\":{\"133\":1}}],[\"删除key\",{\"1\":{\"125\":1}}],[\"删除key对应的field\",{\"1\":{\"121\":1}}],[\"删除某个成员\",{\"1\":{\"124\":1}}],[\"删除某个位置的元素并返回\",{\"1\":{\"51\":1}}],[\"删除集合中的元素\",{\"1\":{\"123\":1}}],[\"删除键值对\",{\"1\":{\"66\":1}}],[\"删除值为0的元素\",{\"1\":{\"52\":1}}],[\"删除第0个元素\",{\"1\":{\"51\":1}}],[\"访问方式同数组\",{\"1\":{\"50\":1}}],[\"增加元素\",{\"0\":{\"50\":1}}],[\"列表list\",{\"1\":{\"118\":1}}],[\"列表解析\",{\"0\":{\"59\":1}}],[\"列表格式操作\",{\"0\":{\"58\":1}}],[\"列表名\",{\"1\":{\"57\":1}}],[\"列表推导式\",{\"0\":{\"56\":1}}],[\"列表\",{\"0\":{\"49\":1,\"122\":1}}],[\"强转\",{\"0\":{\"47\":1}}],[\"串\",{\"1\":{\"46\":1}}],[\"+name\",{\"1\":{\"69\":5}}],[\"+message2\",{\"1\":{\"45\":1}}],[\"+\",{\"1\":{\"45\":1,\"69\":5}}],[\"步长为2\",{\"1\":{\"44\":1}}],[\"从字符串中提取子串\",{\"1\":{\"144\":1,\"151\":1}}],[\"从第6位开始取5个字符\",{\"1\":{\"136\":1}}],[\"从数据库表中删除数据\",{\"1\":{\"131\":1}}],[\"从数据库表中获取数据\",{\"1\":{\"131\":1}}],[\"从而实现\",{\"1\":{\"129\":1}}],[\"从而帮助我们在不同的阶段执行不同的代码\",{\"1\":{\"92\":1}}],[\"从一到四找一个随机数\",{\"1\":{\"44\":1}}],[\"从这里可以看出python对于数据和字符处理具有很多优势\",{\"1\":{\"44\":1}}],[\"从脑子里面检索知识区的方法显然并不容易\",{\"1\":{\"7\":1}}],[\"存储数据时经常使用lower\",{\"1\":{\"44\":1}}],[\"该方法返回一个\",{\"1\":{\"41\":1}}],[\"关系\",{\"1\":{\"41\":1}}],[\"关于类似\",{\"1\":{\"25\":1}}],[\"关于引号的区别\",{\"0\":{\"20\":1}}],[\"关于初心\",{\"0\":{\"3\":1}}],[\"关于\",{\"0\":{\"0\":1,\"17\":1,\"21\":1,\"22\":1}}],[\"用来标识顺序\",{\"1\":{\"124\":1}}],[\"用于在表单输入和应用状态之间建立双向绑定\",{\"1\":{\"101\":1}}],[\"用于遍历和修改集合\",{\"1\":{\"41\":1}}],[\"用法同c语言\",{\"1\":{\"64\":1}}],[\"用\",{\"1\":{\"48\":1}}],[\"用途\",{\"1\":{\"41\":1}}],[\"方法中创建一系列实例并设置其属性\",{\"1\":{\"88\":1}}],[\"方法setup让测试方法编写起来更加容易\",{\"1\":{\"88\":1}}],[\"方法\",{\"0\":{\"44\":1},\"1\":{\"41\":2}}],[\"实例化对象and访问对象\",{\"1\":{\"74\":1}}],[\"实现了第一范式\",{\"1\":{\"127\":1}}],[\"实现iterable接口的类必须提供一个\",{\"1\":{\"41\":1}}],[\"实现\",{\"1\":{\"41\":1}}],[\"实际上是11~15行\",{\"1\":{\"113\":1}}],[\"实际上就是看某个变量有没有变化\",{\"1\":{\"100\":1}}],[\"实际上就是你写html的时候的那些标签里面的属性\",{\"1\":{\"97\":1}}],[\"实际上就是类中的方法\",{\"1\":{\"25\":1}}],[\"实际上的生命周期图如下\",{\"1\":{\"92\":1}}],[\"实际上不同的异常\",{\"1\":{\"81\":1}}],[\"实际上他们同时指向一块字符串占据的内存\",{\"1\":{\"26\":1}}],[\"程序不会在编译时提醒处理这个异常\",{\"1\":{\"39\":1}}],[\"程序员可以选择处理或不处理unchecked异常\",{\"1\":{\"38\":1}}],[\"over\",{\"1\":{\"141\":3}}],[\"offset\",{\"1\":{\"113\":1}}],[\"oldquestion\",{\"1\":{\"100\":1}}],[\"only\",{\"1\":{\"113\":2}}],[\"on\",{\"1\":{\"97\":2,\"102\":1}}],[\"once可以实现一次性差值\",{\"1\":{\"94\":1}}],[\"once>\",{\"1\":{\"94\":1}}],[\"open函数将会自动创建一个以其命名的文件\",{\"1\":{\"80\":1}}],[\"open\",{\"1\":{\"80\":4,\"84\":1,\"85\":1}}],[\"or字句表示两个条件满足一个即可\",{\"1\":{\"112\":1}}],[\"orderid\",{\"1\":{\"128\":6}}],[\"order\",{\"0\":{\"109\":1},\"1\":{\"109\":2,\"113\":4,\"132\":1,\"141\":3}}],[\"oracle\",{\"1\":{\"113\":1}}],[\"oracle数据库标准库函数\",{\"0\":{\"134\":1}}],[\"oracle数据库\",{\"0\":{\"106\":1}}],[\"oracle和mysql的区别\",{\"0\":{\"105\":1}}],[\"or\",{\"1\":{\"65\":1}}],[\"out\",{\"1\":{\"39\":1}}],[\"obj\",{\"1\":{\"30\":1}}],[\"object\",{\"1\":{\"30\":1}}],[\"object类继承而来的\",{\"1\":{\"30\":1}}],[\"运行时检查\",{\"1\":{\"38\":1}}],[\"必须通过try\",{\"1\":{\"35\":1}}],[\"必须处理\",{\"1\":{\"34\":1}}],[\"示例代码\",{\"0\":{\"35\":1,\"39\":1}}],[\"等\",{\"1\":{\"34\":1,\"38\":1}}],[\"典型例子\",{\"1\":{\"34\":1,\"38\":1}}],[\"编译器不强制检查这些异常是否被处理\",{\"1\":{\"38\":1}}],[\"编译器会强制检查这些异常是否被处理\",{\"1\":{\"34\":1}}],[\"编译时检查\",{\"1\":{\"34\":1}}],[\"特点\",{\"0\":{\"34\":1,\"38\":1}}],[\"特殊字符的转移序列\",{\"1\":{\"25\":1}}],[\"定义子类的属性\",{\"0\":{\"76\":1}}],[\"定义一个集合可以被迭代\",{\"1\":{\"41\":1}}],[\"定义\",{\"0\":{\"33\":1,\"37\":1},\"1\":{\"62\":1}}],[\"下面是详细的解释\",{\"1\":{\"31\":1}}],[\"下次检索就更高效了\",{\"1\":{\"7\":1}}],[\"异常的继承关系\",{\"0\":{\"40\":1}}],[\"异常分为两大类\",{\"1\":{\"31\":1}}],[\"异常\",{\"0\":{\"31\":1,\"81\":1}}],[\"为真\",{\"1\":{\"147\":1}}],[\"为了提高散列表的性能\",{\"1\":{\"30\":1}}],[\"为\",{\"1\":{\"30\":2}}],[\"返回数组在指定维度的长度\",{\"1\":{\"156\":1}}],[\"返回数值的绝对值\",{\"1\":{\"145\":1,\"152\":1}}],[\"返回两个日期之间的间隔\",{\"1\":{\"153\":1}}],[\"返回两个日期之间的天数\",{\"1\":{\"146\":1}}],[\"返回参数列表中的第一个非null值\",{\"1\":{\"149\":1,\"154\":1}}],[\"返回参数列表中的第一个非空表达式\",{\"1\":{\"142\":1}}],[\"返回列中非null值的数量\",{\"1\":{\"148\":1,\"155\":1}}],[\"返回列中的最小值\",{\"1\":{\"148\":1,\"155\":1}}],[\"返回列中的最大值\",{\"1\":{\"148\":1,\"155\":1}}],[\"返回当前日期和时间\",{\"1\":{\"146\":1,\"153\":1}}],[\"返回当前日期\",{\"1\":{\"146\":1,\"153\":1}}],[\"返回当前系统日期和时间\",{\"1\":{\"138\":1}}],[\"返回不小于数值的最小整数\",{\"1\":{\"145\":1,\"152\":1}}],[\"返回不大于数值的最大整数\",{\"1\":{\"145\":1,\"152\":1}}],[\"返回第一个表达式\",{\"1\":{\"142\":1}}],[\"返回小于等于\",{\"1\":{\"137\":1}}],[\"返回大于等于\",{\"1\":{\"137\":1}}],[\"返回字符串的长度\",{\"1\":{\"144\":1,\"151\":1}}],[\"返回字符串\",{\"1\":{\"136\":1}}],[\"返回所有key\",{\"1\":{\"125\":1}}],[\"返回所有给定集合的并集\",{\"1\":{\"123\":1}}],[\"返回key所存储的值的类型\",{\"1\":{\"125\":1}}],[\"返回给定所有集合的交集\",{\"1\":{\"123\":1}}],[\"返回集合中的所有成员\",{\"1\":{\"123\":1}}],[\"返回值类型任意\",{\"1\":{\"69\":1}}],[\"返回值\",{\"1\":{\"69\":1}}],[\"返回值为a的长度\",{\"1\":{\"55\":1}}],[\"返回一个\",{\"1\":{\"41\":1}}],[\"返回\",{\"1\":{\"30\":1,\"137\":1,\"138\":2,\"142\":1,\"144\":7,\"145\":4,\"146\":4,\"147\":2,\"149\":3,\"151\":7,\"152\":4,\"153\":2,\"154\":4,\"156\":2,\"157\":1}}],[\"返回类型不是方法签名的一部分\",{\"1\":{\"29\":1}}],[\"即对于任何两个对象\",{\"1\":{\"30\":2}}],[\"即\",{\"1\":{\"30\":1}}],[\"它可以存储键\",{\"1\":{\"117\":1}}],[\"它们通常是由程序中的逻辑错误或程序员的疏忽引起的\",{\"1\":{\"37\":1}}],[\"它们并不一定相等\",{\"1\":{\"30\":1}}],[\"它是从\",{\"1\":{\"30\":1}}],[\"它是一个整数\",{\"1\":{\"30\":1}}],[\"它先在京东呆了一段时间\",{\"1\":{\"5\":1}}],[\"hhhellohh\",{\"1\":{\"136\":1}}],[\"h\",{\"1\":{\"136\":2}}],[\"hvals\",{\"1\":{\"121\":1}}],[\"hkeys\",{\"1\":{\"121\":1}}],[\"hget\",{\"1\":{\"121\":2}}],[\"hset\",{\"1\":{\"121\":1}}],[\"happy\",{\"1\":{\"136\":2}}],[\"handle\",{\"1\":{\"97\":1}}],[\"hasnext\",{\"1\":{\"41\":1}}],[\"hashset等集合\",{\"1\":{\"30\":1}}],[\"hashmap\",{\"1\":{\"30\":1}}],[\"hashcode\",{\"1\":{\"30\":4}}],[\"hashcode和\",{\"1\":{\"30\":1}}],[\"hashcode和equals方法\",{\"0\":{\"30\":1}}],[\"hashcode方法返回对象的哈希码值\",{\"1\":{\"30\":1}}],[\"href=\",{\"1\":{\"97\":1}}],[\"html和v\",{\"1\":{\"97\":1}}],[\"html=\",{\"1\":{\"95\":1}}],[\"html标签\",{\"1\":{\"95\":1}}],[\"html插值\",{\"0\":{\"95\":1}}],[\"he\",{\"1\":{\"20\":1}}],[\"helloworld\",{\"1\":{\"136\":2}}],[\"hello可以自定义变量名\",{\"1\":{\"80\":1}}],[\"hello\",{\"1\":{\"18\":1,\"20\":2,\"43\":1,\"45\":1,\"67\":1,\"68\":1,\"69\":5,\"80\":7,\"90\":1,\"99\":1,\"100\":1,\"136\":8,\"144\":12,\"151\":12}}],[\"参数类型相同\",{\"1\":{\"29\":1}}],[\"并给每个员工分配一个唯一的行号\",{\"1\":{\"141\":1}}],[\"并实际上给他赋予了函数的返回值\",{\"1\":{\"99\":1}}],[\"并不需要指出变量类型\",{\"1\":{\"43\":1}}],[\"并不是引用传递\",{\"1\":{\"29\":1}}],[\"并且如果查找内容非数值\",{\"1\":{\"132\":1}}],[\"并且如果对string类型的变量重新赋值\",{\"1\":{\"26\":1}}],[\"并且指定过期时间\",{\"1\":{\"120\":1}}],[\"并且可以使用任意次数\",{\"1\":{\"102\":1}}],[\"并且生成一个列表\",{\"1\":{\"82\":1}}],[\"并且给定了初始化的方法\",{\"1\":{\"75\":1}}],[\"并且方式和建立有些不同\",{\"1\":{\"69\":1}}],[\"并且对象的每一项都是由键值对组成的\",{\"1\":{\"18\":1}}],[\"并且一定会减少以后再复习的时间\",{\"1\":{\"7\":1}}],[\"并且依托学校平台和校友资源\",{\"1\":{\"5\":1}}],[\"并且当时的研究生质量也不是很好\",{\"1\":{\"5\":1}}],[\"并且也属于一种大国重器和卡脖子技术\",{\"1\":{\"5\":1}}],[\"对数值进行四舍五入到指定的小数位数\",{\"1\":{\"152\":1}}],[\"对数值进行四舍五入\",{\"1\":{\"145\":1}}],[\"对学生的分数进行排名\",{\"1\":{\"141\":1}}],[\"对所有员工按薪资降序排列\",{\"1\":{\"141\":1}}],[\"对于这个表\",{\"1\":{\"129\":1}}],[\"对于对象的方法传递\",{\"1\":{\"29\":1}}],[\"对大小写是不敏感的\",{\"1\":{\"107\":1}}],[\"对应文本内容就会改变\",{\"1\":{\"94\":1}}],[\"对属性分别需要声明\",{\"1\":{\"74\":1}}],[\"对string类型的变量重新赋值\",{\"1\":{\"26\":1}}],[\"面向对象\",{\"0\":{\"29\":1}}],[\"允许出现长度为0的数组\",{\"1\":{\"28\":1}}],[\"就可以用redis快速存取\",{\"1\":{\"117\":1}}],[\"就将所有带有null的放到前面\",{\"1\":{\"109\":1}}],[\"就是类里面的初始化方法\",{\"1\":{\"74\":1}}],[\"就不能修改大小了\",{\"1\":{\"28\":1}}],[\"就像十进制无法精确表示1\",{\"1\":{\"25\":1}}],[\"只有key不存在的时候才设置\",{\"1\":{\"120\":1}}],[\"只有当两个值的类型和内容都相同时才会返回\",{\"1\":{\"22\":1}}],[\"只不过换了一种方式\",{\"1\":{\"97\":1}}],[\"只输出后三个元素\",{\"1\":{\"60\":1}}],[\"只能用biginteger中的方法进行运算\",{\"1\":{\"27\":1}}],[\"因此\",{\"1\":{\"40\":1}}],[\"因此程序员不能够自定义运算符\",{\"1\":{\"27\":1}}],[\"因为它通过\",{\"1\":{\"129\":1}}],[\"因为它只依赖于主键的一部分\",{\"1\":{\"129\":1}}],[\"因为redis是存储在内存中的\",{\"1\":{\"117\":1}}],[\"因为文件读取到末尾会返回一个空字符串\",{\"1\":{\"80\":1}}],[\"因为无法确保数据是大写还是小写\",{\"1\":{\"44\":1}}],[\"因为equals比较的本质是比较字符串的字面量\",{\"1\":{\"26\":1}}],[\"因为类型不同\",{\"1\":{\"22\":4}}],[\"因为空字符串被转换成了数字\",{\"1\":{\"22\":1}}],[\"因为\",{\"1\":{\"22\":2,\"80\":1}}],[\"因为字符串\",{\"1\":{\"22\":1}}],[\"因为你可能会遗忘\",{\"1\":{\"7\":1}}],[\"相同分数的学生排名相同\",{\"1\":{\"141\":1}}],[\"相当于同时绑定了\",{\"1\":{\"101\":1}}],[\"相当于将这个变量重新指向了另一个字符串\",{\"1\":{\"26\":1}}],[\"相比于在每个测试方法中都创建实例并设置属性\",{\"1\":{\"88\":1}}],[\"相对较大的数\",{\"1\":{\"27\":1}}],[\"相对较小的数\",{\"1\":{\"27\":1}}],[\"vm\",{\"1\":{\"99\":2,\"100\":1}}],[\"v\",{\"0\":{\"101\":1},\"1\":{\"91\":3,\"94\":2,\"95\":1,\"96\":3,\"97\":6,\"101\":2,\"102\":1}}],[\"var\",{\"1\":{\"90\":1,\"91\":2,\"92\":1,\"99\":1,\"100\":1}}],[\"values\",{\"1\":{\"132\":1}}],[\"value2\",{\"1\":{\"122\":1,\"149\":2,\"154\":2}}],[\"value1\",{\"1\":{\"122\":1,\"149\":2,\"154\":2}}],[\"value属性和\",{\"1\":{\"101\":1}}],[\"value的平方\",{\"1\":{\"44\":1}}],[\"value\",{\"1\":{\"44\":1,\"59\":2,\"117\":1,\"120\":3,\"121\":1,\"152\":4}}],[\"valueof\",{\"1\":{\"27\":1}}],[\"void\",{\"1\":{\"35\":1,\"39\":1}}],[\"vue3基础零碎\",{\"0\":{\"103\":1}}],[\"vue实例\",{\"0\":{\"90\":1}}],[\"vue2基础零碎\",{\"0\":{\"89\":1}}],[\"vue\",{\"1\":{\"18\":1,\"90\":3,\"91\":4,\"92\":1,\"99\":1,\"100\":1,\"102\":5}}],[\"vue基础\",{\"0\":{\"12\":1,\"162\":1}}],[\"大数\",{\"0\":{\"27\":1}}],[\"大多数情况下\",{\"1\":{\"7\":1}}],[\"将当前日期转换为\",{\"1\":{\"140\":1}}],[\"将\",{\"1\":{\"137\":2}}],[\"将字符串\",{\"1\":{\"140\":2}}],[\"将字符串中的\",{\"1\":{\"136\":1}}],[\"将字符串转换为大写\",{\"1\":{\"136\":1,\"144\":1,\"151\":1}}],[\"将字符串转换为小写\",{\"1\":{\"136\":1,\"144\":1,\"151\":1}}],[\"将字符12强转为数字12\",{\"1\":{\"67\":1}}],[\"将一个或多个插入头部\",{\"1\":{\"122\":1}}],[\"将一整个函数分成多个子功能并且在需要时调用子功能\",{\"1\":{\"86\":1}}],[\"将哈希表key中的字段field的值设为value\",{\"1\":{\"121\":1}}],[\"将类作为属性\",{\"0\":{\"78\":1}}],[\"将数组倒序改变\",{\"1\":{\"54\":1}}],[\"将返回位置n的代码单元\",{\"1\":{\"26\":1}}],[\"将会带来很多的商业收益和非常大的学术贡献\",{\"1\":{\"5\":1}}],[\"表示两个条件同时满足\",{\"1\":{\"112\":1}}],[\"表示对每两个\",{\"1\":{\"80\":1}}],[\"表示在代码块中使用\",{\"1\":{\"80\":1}}],[\"表示调用父类的方法\",{\"1\":{\"75\":1}}],[\"表示新的类是继承之前类的\",{\"1\":{\"75\":1}}],[\"表示空串\",{\"1\":{\"26\":1}}],[\"表示的是数组或列表\",{\"1\":{\"19\":1}}],[\"表示的是对象\",{\"1\":{\"18\":1}}],[\"尽量使用字符串的equals方法进行比较\",{\"1\":{\"26\":1}}],[\"假如旧的字符串不被其他变量使用\",{\"1\":{\"26\":1}}],[\"current\",{\"1\":{\"153\":4}}],[\"curdate\",{\"1\":{\"146\":2}}],[\"customername\",{\"1\":{\"128\":4}}],[\"customerid\",{\"1\":{\"128\":7}}],[\"ceiling\",{\"1\":{\"152\":2}}],[\"ceil\",{\"1\":{\"137\":1,\"145\":2}}],[\"characters\",{\"1\":{\"151\":1}}],[\"char\",{\"1\":{\"140\":1}}],[\"charlist\",{\"1\":{\"115\":2}}],[\"checkedexceptionexample\",{\"1\":{\"35\":1}}],[\"checked异常是exception的直接子类\",{\"1\":{\"40\":1}}],[\"checked异常是那些在编译时就必须处理的异常\",{\"1\":{\"33\":1}}],[\"checked异常\",{\"0\":{\"32\":1}}],[\"checked异常和unchecked异常\",{\"1\":{\"31\":1}}],[\"create\",{\"1\":{\"107\":1,\"133\":3}}],[\"created\",{\"1\":{\"92\":1}}],[\"clice\",{\"1\":{\"115\":1}}],[\"clicked\",{\"1\":{\"102\":1}}],[\"click=\",{\"1\":{\"97\":1,\"102\":1}}],[\"class\",{\"1\":{\"35\":1,\"39\":1,\"74\":2,\"75\":2,\"76\":1,\"77\":2,\"78\":2,\"87\":1}}],[\"classnotfoundexception\",{\"1\":{\"34\":1}}],[\"case\",{\"1\":{\"147\":2,\"154\":2}}],[\"car=g\",{\"1\":{\"79\":1}}],[\"car=car\",{\"1\":{\"79\":1}}],[\"car前后顺序不能互换\",{\"1\":{\"79\":1}}],[\"car\",{\"1\":{\"79\":4}}],[\"catch块处理\",{\"1\":{\"35\":1}}],[\"catch块进行处理\",{\"1\":{\"33\":1}}],[\"catch\",{\"1\":{\"35\":1}}],[\"coalesce\",{\"1\":{\"142\":1,\"149\":2,\"154\":2}}],[\"coursename\",{\"1\":{\"129\":3}}],[\"courseid\",{\"1\":{\"129\":6}}],[\"count++\",{\"1\":{\"102\":1}}],[\"count\",{\"1\":{\"102\":2,\"139\":1,\"148\":2,\"155\":2}}],[\"column\",{\"1\":{\"139\":5,\"148\":5,\"155\":5}}],[\"column2\",{\"1\":{\"108\":1}}],[\"column1\",{\"1\":{\"108\":1,\"110\":1,\"111\":2,\"114\":1}}],[\"color\",{\"1\":{\"66\":2}}],[\"computed里面的东西就不会再次执行\",{\"1\":{\"99\":1}}],[\"computed就是计算属性\",{\"1\":{\"99\":1}}],[\"computed\",{\"1\":{\"99\":1}}],[\"component>\",{\"1\":{\"102\":1}}],[\"component><\",{\"1\":{\"102\":1}}],[\"component\",{\"1\":{\"91\":2,\"102\":2}}],[\"condition\",{\"1\":{\"147\":1,\"154\":1}}],[\"concat\",{\"1\":{\"136\":1,\"144\":2,\"151\":2}}],[\"contents\",{\"1\":{\"80\":2}}],[\"contents=hello\",{\"1\":{\"80\":1}}],[\"continue\",{\"1\":{\"64\":1}}],[\"console\",{\"1\":{\"22\":8,\"92\":1}}],[\"copyof\",{\"1\":{\"28\":1}}],[\"c\",{\"1\":{\"27\":2}}],[\"c++中的字符数组的\",{\"1\":{\"26\":1}}],[\"当我们学习一个新知识的时候\",{\"1\":{\"106\":1}}],[\"当我们再次调用\",{\"1\":{\"99\":1}}],[\"当我在某个知识忘记之后\",{\"1\":{\"3\":1}}],[\"当msg的property更新以后\",{\"1\":{\"94\":1}}],[\"当两个字符串变量同时被赋值为一个字符串时\",{\"1\":{\"26\":1}}],[\"采用scanner对象进行输入\",{\"1\":{\"25\":1}}],[\"输入一些文本\",{\"1\":{\"101\":1}}],[\"输入具体值以后会冲掉默认值\",{\"1\":{\"69\":1}}],[\"输入\",{\"0\":{\"67\":1}}],[\"输入时\",{\"1\":{\"25\":1}}],[\"输出列中内容\",{\"1\":{\"132\":1}}],[\"输出表中全部内容\",{\"1\":{\"132\":1}}],[\"输出某几个表\",{\"1\":{\"132\":1}}],[\"输出集合后的结果\",{\"1\":{\"66\":1}}],[\"输出排序后的结果\",{\"1\":{\"66\":1}}],[\"输出删除字符串两边多余的空格后的值\",{\"1\":{\"44\":1}}],[\"输出删除字符串头部多余的空格后的值\",{\"1\":{\"44\":1}}],[\"输出删除字符串尾部多余的空格后的值\",{\"1\":{\"44\":1}}],[\"输出就是把你学到的东西或者记忆的东西\",{\"1\":{\"7\":1}}],[\"输出是最好的记忆方法\",{\"0\":{\"7\":1}}],[\"不能两个混杂\",{\"1\":{\"127\":1}}],[\"不在字符表中的任何一个字符\",{\"1\":{\"115\":1}}],[\"不加asc也默认是升序\",{\"1\":{\"109\":1}}],[\"不可变的列表\",{\"1\":{\"62\":1}}],[\"不改变原数组顺序\",{\"1\":{\"53\":1}}],[\"不强转会报错\",{\"1\":{\"47\":1}}],[\"不强制处理\",{\"1\":{\"38\":1}}],[\"不一定为\",{\"1\":{\"30\":1}}],[\"不需要指明类型\",{\"1\":{\"25\":1}}],[\"不相等的对象尽量具有不同的哈希码值\",{\"1\":{\"30\":1}}],[\"不相等\",{\"1\":{\"22\":1}}],[\"局部变量可以通过var修饰\",{\"1\":{\"25\":1}}],[\"found\",{\"1\":{\"158\":1}}],[\"for=\",{\"1\":{\"91\":1}}],[\"formatted\",{\"1\":{\"87\":4}}],[\"for循环\",{\"1\":{\"64\":1}}],[\"for\",{\"1\":{\"28\":1,\"59\":1,\"64\":1,\"66\":2,\"80\":1,\"100\":1,\"151\":2}}],[\"feb\",{\"1\":{\"138\":1}}],[\"fetch\",{\"1\":{\"113\":5}}],[\"fetch子句\",{\"0\":{\"113\":1}}],[\"floor\",{\"1\":{\"137\":1,\"145\":2,\"152\":2}}],[\"function\",{\"1\":{\"87\":1,\"92\":1,\"99\":1,\"100\":1,\"102\":1}}],[\"f不会输出\",{\"1\":{\"77\":1}}],[\"f\",{\"1\":{\"77\":1,\"84\":2,\"85\":2}}],[\"friday\",{\"1\":{\"138\":1}}],[\"from\",{\"1\":{\"71\":1,\"79\":2,\"87\":1,\"102\":2,\"108\":2,\"109\":2,\"110\":1,\"111\":5,\"113\":4,\"114\":2,\"132\":8,\"136\":1,\"144\":1,\"151\":4}}],[\"fr\",{\"1\":{\"35\":1}}],[\"field\",{\"1\":{\"121\":3,\"153\":1}}],[\"first\",{\"1\":{\"87\":1,\"109\":1,\"113\":1,\"142\":2,\"149\":2,\"154\":2}}],[\"filename\",{\"1\":{\"80\":3,\"84\":1,\"85\":1}}],[\"filename=\",{\"1\":{\"80\":3,\"84\":1,\"85\":1}}],[\"filenotfoundexception是一个checked异常\",{\"1\":{\"35\":1}}],[\"filenotfoundexception\",{\"1\":{\"35\":2}}],[\"filereader\",{\"1\":{\"35\":3}}],[\"file\",{\"1\":{\"35\":6}}],[\"final\",{\"1\":{\"25\":1}}],[\"false\",{\"1\":{\"22\":7,\"147\":2,\"154\":1}}],[\"双引号\",{\"1\":{\"25\":1}}],[\"回车\",{\"1\":{\"25\":1}}],[\"round\",{\"1\":{\"137\":1,\"145\":2,\"152\":2}}],[\"row\",{\"1\":{\"113\":1,\"141\":1}}],[\"rows\",{\"1\":{\"113\":6}}],[\"rpop\",{\"1\":{\"122\":1}}],[\"rank\",{\"1\":{\"141\":3}}],[\"range\",{\"1\":{\"44\":1,\"58\":1,\"59\":1}}],[\"rawhtml\",{\"1\":{\"95\":1}}],[\"r+\",{\"1\":{\"80\":1}}],[\"rstrip\",{\"1\":{\"44\":1,\"80\":1}}],[\"result\",{\"1\":{\"147\":2,\"154\":2}}],[\"replace\",{\"1\":{\"136\":1,\"144\":2,\"151\":2}}],[\"redis中的命令也不区分大小写\",{\"1\":{\"119\":1}}],[\"redis中常用的数据类型\",{\"0\":{\"118\":1}}],[\"redis的作用往往是用来存储热点数据的\",{\"1\":{\"117\":1}}],[\"redis是一个非关系型数据库\",{\"1\":{\"117\":1}}],[\"redis是什么\",{\"0\":{\"117\":1}}],[\"redis学习笔记\",{\"0\":{\"116\":1}}],[\"revoke\",{\"1\":{\"107\":1}}],[\"reversedmessage就得到了message的翻转\",{\"1\":{\"99\":1}}],[\"reversedmessage\",{\"1\":{\"99\":3}}],[\"reversed\",{\"1\":{\"99\":1}}],[\"reverse\",{\"1\":{\"54\":1,\"99\":1}}],[\"reverse=true\",{\"1\":{\"53\":1}}],[\"readlines\",{\"1\":{\"80\":1}}],[\"read\",{\"1\":{\"80\":1}}],[\"remove\",{\"1\":{\"41\":1,\"52\":1}}],[\"return\",{\"1\":{\"18\":1,\"69\":2,\"99\":1,\"101\":1,\"102\":1}}],[\"runtimeexception及其子类\",{\"1\":{\"40\":2}}],[\"runtimeexception是所有unchecked异常的父类\",{\"1\":{\"40\":1}}],[\"r\",{\"1\":{\"25\":1}}],[\"换行符\",{\"1\":{\"46\":1}}],[\"换行\",{\"1\":{\"25\":1}}],[\"制表符\",{\"1\":{\"46\":1}}],[\"制表\",{\"1\":{\"25\":1}}],[\"both\",{\"1\":{\"151\":1}}],[\"bob\",{\"1\":{\"64\":1,\"69\":4,\"82\":1,\"128\":2,\"129\":2,\"132\":2}}],[\"b最终还得依赖于c\",{\"1\":{\"129\":1}}],[\"blice\",{\"1\":{\"115\":2}}],[\"black\",{\"1\":{\"76\":1,\"77\":1,\"78\":1}}],[\"between\",{\"1\":{\"111\":1,\"138\":1}}],[\"beginnings\",{\"0\":{\"3\":1}}],[\"by\",{\"1\":{\"109\":2,\"113\":4,\"132\":1,\"141\":3}}],[\"by子句\",{\"0\":{\"109\":1}}],[\"button>\",{\"1\":{\"97\":1,\"102\":1}}],[\"bind都是指令\",{\"1\":{\"97\":1}}],[\"bind来将某些属性绑定到标签上\",{\"1\":{\"96\":1}}],[\"bind\",{\"1\":{\"91\":2,\"96\":2,\"97\":3}}],[\"bind指令将待办项传到循环输出的每个组件中\",{\"1\":{\"91\":1}}],[\"birthday\",{\"1\":{\"65\":1}}],[\"big\",{\"1\":{\"27\":1}}],[\"biginteger\",{\"1\":{\"27\":6}}],[\"biginteger和bigdecimal\",{\"1\":{\"27\":1}}],[\"break\",{\"1\":{\"64\":1}}],[\"b\",{\"1\":{\"25\":1,\"27\":2,\"28\":1,\"30\":6,\"69\":1,\"128\":2,\"142\":1,\"149\":1,\"154\":1}}],[\"浮点数采用二进制表示\",{\"1\":{\"25\":1}}],[\"每一个函数\",{\"1\":{\"25\":1}}],[\"解决了在不同操作系统或者不同平台上由于数据类型等其他方面不同造成的错误\",{\"1\":{\"25\":1}}],[\"语法基础\",{\"0\":{\"25\":1}}],[\"今天面试一家小厂的时候问到java线程锁了\",{\"1\":{\"23\":1}}],[\"数值函数\",{\"0\":{\"137\":1,\"145\":1,\"152\":1}}],[\"数学\",{\"1\":{\"127\":2}}],[\"数学运算\",{\"0\":{\"57\":1}}],[\"数组函数\",{\"0\":{\"156\":1}}],[\"数组长度\",{\"0\":{\"55\":1}}],[\"数组拷贝要用copyof方法\",{\"1\":{\"28\":1}}],[\"数组的长度一旦被确定了\",{\"1\":{\"28\":1}}],[\"数组\",{\"0\":{\"28\":1}}],[\"数字\",{\"1\":{\"22\":1}}],[\"数据持久化\",{\"1\":{\"117\":1}}],[\"数据结构与算法\",{\"0\":{\"14\":1}}],[\"数据库表\",{\"1\":{\"133\":1}}],[\"数据库定义语句\",{\"0\":{\"133\":1}}],[\"数据库定义语言\",{\"1\":{\"107\":1}}],[\"数据库操作语句\",{\"0\":{\"131\":1}}],[\"数据库操作语言\",{\"1\":{\"107\":1}}],[\"数据库语句学习\",{\"0\":{\"130\":1}}],[\"数据库语言一般分为四种\",{\"1\":{\"107\":1}}],[\"数据库语言的分类\",{\"0\":{\"107\":1}}],[\"数据库三大范式\",{\"0\":{\"126\":1}}],[\"数据库控制语言\",{\"1\":{\"107\":1}}],[\"数据库查询语言\",{\"1\":{\"107\":1}}],[\"数据库\",{\"0\":{\"13\":1,\"163\":1}}],[\"严格\",{\"1\":{\"22\":1}}],[\"而打印出来显示的就是空行\",{\"1\":{\"80\":1}}],[\"而unchecked异常是\",{\"1\":{\"40\":1}}],[\"而是按值传递\",{\"1\":{\"29\":1}}],[\"而不是直接返回变量和值\",{\"1\":{\"102\":1}}],[\"而不是都作为字符串输出\",{\"1\":{\"77\":1}}],[\"而不是\",{\"1\":{\"48\":1}}],[\"而不是下标值\",{\"1\":{\"28\":1}}],[\"而不是像c语言一样填充垃圾值\",{\"1\":{\"28\":1}}],[\"而不是修改了这个字符串\",{\"1\":{\"26\":1}}],[\"而不是十进制\",{\"1\":{\"25\":1}}],[\"而\",{\"1\":{\"22\":1,\"26\":1}}],[\"而反引号的好处是可以进行插值\",{\"1\":{\"20\":1}}],[\"02\",{\"1\":{\"146\":1}}],[\"04\",{\"1\":{\"146\":6,\"153\":2}}],[\"01\",{\"1\":{\"138\":9,\"140\":2,\"146\":4,\"153\":2}}],[\"002\",{\"1\":{\"128\":3}}],[\"00\",{\"1\":{\"128\":4}}],[\"001\",{\"1\":{\"128\":3}}],[\"0=\",{\"1\":{\"66\":3}}],[\"0\",{\"1\":{\"22\":8,\"25\":1,\"50\":1,\"51\":2,\"52\":1,\"60\":1,\"66\":11,\"81\":1,\"91\":1,\"102\":1,\"124\":1,\"157\":7}}],[\"被认为相等\",{\"1\":{\"22\":1}}],[\"被转换成了数字\",{\"1\":{\"22\":2}}],[\"update\",{\"1\":{\"107\":1,\"131\":1,\"132\":1}}],[\"upper\",{\"1\":{\"44\":1,\"136\":1,\"144\":2,\"151\":2}}],[\"url\",{\"1\":{\"97\":1}}],[\"unnittest\",{\"1\":{\"87\":1}}],[\"unittest\",{\"1\":{\"87\":3}}],[\"uncheckedexceptionexample\",{\"1\":{\"39\":1}}],[\"unchecked异常是那些在编译时不强制要求处理的异常\",{\"1\":{\"37\":1}}],[\"unchecked异常\",{\"0\":{\"36\":1}}],[\"undefined\",{\"1\":{\"22\":3}}],[\"user\",{\"1\":{\"18\":1}}],[\"type\",{\"1\":{\"125\":1,\"146\":1}}],[\"typing\",{\"1\":{\"100\":1}}],[\"table\",{\"1\":{\"132\":10,\"133\":3}}],[\"table4\",{\"1\":{\"111\":1,\"113\":1}}],[\"table3\",{\"1\":{\"111\":2,\"113\":1}}],[\"table2\",{\"1\":{\"108\":1,\"111\":1,\"113\":1}}],[\"table1\",{\"1\":{\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"113\":1,\"114\":2}}],[\"to\",{\"1\":{\"100\":1,\"140\":3,\"144\":1,\"151\":1}}],[\"todo=\",{\"1\":{\"91\":1}}],[\"todo\",{\"1\":{\"91\":6}}],[\"ties\",{\"1\":{\"113\":1}}],[\"timestamp2\",{\"1\":{\"153\":1}}],[\"timestamp1\",{\"1\":{\"153\":1}}],[\"timestamp\",{\"1\":{\"153\":6}}],[\"times\",{\"1\":{\"102\":1}}],[\"tip\",{\"1\":{\"97\":1,\"102\":1,\"106\":1}}],[\"title=\",{\"1\":{\"82\":1}}],[\"title\",{\"1\":{\"45\":1,\"82\":1}}],[\"tittle\",{\"1\":{\"44\":1}}],[\"teachername\",{\"1\":{\"129\":4}}],[\"teacherid\",{\"1\":{\"129\":4}}],[\"text\",{\"1\":{\"91\":4}}],[\"template>\",{\"1\":{\"101\":1,\"102\":1}}],[\"template\",{\"1\":{\"91\":2,\"102\":1}}],[\"tesla\",{\"1\":{\"79\":2}}],[\"testcase表示单元测试\",{\"1\":{\"87\":1}}],[\"testcase\",{\"1\":{\"87\":1}}],[\"test\",{\"1\":{\"77\":4,\"80\":4,\"87\":1}}],[\"then\",{\"1\":{\"147\":2,\"154\":2}}],[\"throwable\",{\"1\":{\"40\":1}}],[\"this\",{\"0\":{\"2\":1},\"1\":{\"99\":1,\"100\":2}}],[\"txt\",{\"1\":{\"35\":1,\"80\":4}}],[\"trailing\",{\"1\":{\"151\":1}}],[\"trunc\",{\"1\":{\"137\":1}}],[\"true\",{\"1\":{\"22\":5,\"30\":5,\"147\":4,\"154\":2}}],[\"trim\",{\"1\":{\"136\":1,\"144\":2,\"151\":2}}],[\"try\",{\"1\":{\"35\":1,\"81\":1}}],[\"t\",{\"1\":{\"25\":1,\"46\":1}}],[\"会尝试将它们转换为相同的类型\",{\"1\":{\"22\":1}}],[\"会拥有超越常人的记忆力\",{\"1\":{\"7\":1}}],[\"end\",{\"1\":{\"147\":2,\"154\":2}}],[\"error\",{\"1\":{\"81\":1}}],[\"ear是dog的一部分\",{\"1\":{\"78\":1}}],[\"ear=ear\",{\"1\":{\"78\":1}}],[\"ear\",{\"1\":{\"78\":2}}],[\"each循环语句中的循环变量会遍历数组元素中的每个元素\",{\"1\":{\"28\":1}}],[\"element\",{\"1\":{\"156\":1}}],[\"el\",{\"1\":{\"90\":1,\"91\":1,\"99\":1,\"100\":1,\"102\":1}}],[\"else\",{\"1\":{\"65\":1,\"147\":2,\"154\":2}}],[\"elif\",{\"1\":{\"65\":1}}],[\"e\",{\"1\":{\"35\":2}}],[\"expr3\",{\"1\":{\"147\":2}}],[\"expr2\",{\"1\":{\"147\":2}}],[\"expr1\",{\"1\":{\"147\":2}}],[\"expr\",{\"1\":{\"146\":1}}],[\"export\",{\"1\":{\"18\":1,\"101\":1}}],[\"exists\",{\"1\":{\"125\":1}}],[\"existent\",{\"1\":{\"35\":1}}],[\"example\",{\"1\":{\"99\":2,\"100\":1}}],[\"except后面应该接不同的异常\",{\"1\":{\"81\":1}}],[\"except\",{\"1\":{\"81\":1}}],[\"exception\",{\"1\":{\"40\":1}}],[\"equals\",{\"1\":{\"30\":3}}],[\"equals方法必须满足以下条件\",{\"1\":{\"30\":1}}],[\"equals方法用于判断两个对象是否相等\",{\"1\":{\"30\":1}}],[\"equality\",{\"1\":{\"22\":2}}],[\"llen\",{\"1\":{\"122\":1}}],[\"lrange\",{\"1\":{\"122\":1}}],[\"lpush\",{\"1\":{\"122\":1}}],[\"last\",{\"1\":{\"87\":1,\"138\":1}}],[\"lang\",{\"1\":{\"40\":3}}],[\"lice\",{\"1\":{\"115\":1}}],[\"like子句\",{\"0\":{\"115\":1}}],[\"like\",{\"1\":{\"111\":1}}],[\"lines\",{\"1\":{\"80\":1}}],[\"lines=hello\",{\"1\":{\"80\":1}}],[\"line\",{\"1\":{\"80\":2}}],[\"list2=\",{\"1\":{\"132\":1}}],[\"list2\",{\"1\":{\"132\":2}}],[\"list1=\",{\"1\":{\"132\":1}}],[\"list1\",{\"1\":{\"132\":3}}],[\"list\",{\"1\":{\"58\":1}}],[\"lstrip\",{\"1\":{\"44\":1}}],[\"leading\",{\"1\":{\"151\":1}}],[\"len\",{\"1\":{\"55\":1,\"144\":1}}],[\"length=length\",{\"1\":{\"78\":1}}],[\"length\",{\"1\":{\"28\":1,\"78\":2,\"136\":1,\"144\":2,\"151\":3,\"156\":2}}],[\"let\",{\"1\":{\"18\":2,\"19\":1,\"20\":2}}],[\"load函数来读取或存储json文件中的数据\",{\"1\":{\"85\":1}}],[\"load\",{\"1\":{\"85\":1}}],[\"lower\",{\"1\":{\"44\":1,\"136\":1,\"144\":2,\"151\":2}}],[\"log\",{\"1\":{\"22\":8,\"92\":1}}],[\"loose\",{\"1\":{\"22\":1}}],[\"比如下面的表\",{\"1\":{\"127\":1}}],[\"比如磨某个数据某个时间段点击量比较高\",{\"1\":{\"117\":1}}],[\"比如\",{\"1\":{\"97\":1}}],[\"比如你要记一个东西\",{\"1\":{\"7\":1}}],[\"比较前后是否相等\",{\"1\":{\"87\":1}}],[\"比较的本质是看两个变量是否指向同一块内存\",{\"1\":{\"26\":1}}],[\"比较字符串时\",{\"1\":{\"26\":1}}],[\"比较时不会进行类型转换\",{\"1\":{\"22\":1}}],[\"比较\",{\"1\":{\"22\":2}}],[\"宽松\",{\"1\":{\"22\":1}}],[\"$\",{\"1\":{\"20\":1}}],[\"waiting\",{\"1\":{\"100\":1}}],[\"watch\",{\"1\":{\"100\":1}}],[\"warning\",{\"1\":{\"89\":1,\"107\":1}}],[\"write\",{\"1\":{\"80\":1}}],[\"w\",{\"1\":{\"80\":1,\"84\":1}}],[\"withscores\",{\"1\":{\"124\":1}}],[\"with的作用在于不需要手动关闭文件\",{\"1\":{\"80\":1}}],[\"with\",{\"1\":{\"80\":4,\"84\":1,\"85\":1,\"113\":1}}],[\"world\",{\"1\":{\"20\":1,\"43\":1,\"45\":1,\"136\":2,\"144\":6,\"151\":6}}],[\"when\",{\"1\":{\"147\":3,\"154\":3}}],[\"where\",{\"1\":{\"111\":5,\"114\":2,\"132\":5}}],[\"where子句\",{\"0\":{\"111\":1}}],[\"white\",{\"1\":{\"74\":2,\"75\":1,\"77\":1}}],[\"while\",{\"1\":{\"64\":1}}],[\"while循环使用方法同上\",{\"1\":{\"64\":1}}],[\"what\",{\"0\":{\"2\":1}}],[\"who\",{\"0\":{\"1\":1}}],[\"34\",{\"1\":{\"146\":2}}],[\"31\",{\"1\":{\"138\":1}}],[\"3一样\",{\"1\":{\"25\":1}}],[\"3\",{\"0\":{\"140\":1,\"146\":1,\"153\":1},\"1\":{\"19\":1,\"39\":2,\"60\":2,\"66\":1,\"84\":1,\"111\":1,\"153\":1,\"156\":3}}],[\"2025\",{\"1\":{\"136\":3}}],[\"2024\",{\"1\":{\"136\":3,\"138\":12,\"140\":2,\"146\":8,\"153\":4}}],[\"20\",{\"1\":{\"128\":2}}],[\"2=\",{\"1\":{\"66\":1}}],[\"23\",{\"1\":{\"47\":1}}],[\"2\",{\"0\":{\"139\":1,\"145\":1,\"152\":1},\"1\":{\"19\":1,\"25\":1,\"39\":1,\"44\":2,\"59\":2,\"66\":4,\"91\":1,\"127\":3,\"128\":4,\"129\":6,\"137\":2,\"138\":1,\"145\":1,\"152\":1,\"156\":3}}],[\"1>0\",{\"1\":{\"147\":2,\"154\":1}}],[\"15\",{\"1\":{\"138\":1}}],[\"1714290772449\",{\"1\":{\"92\":1}}],[\"11\",{\"1\":{\"84\":1}}],[\"16\",{\"1\":{\"74\":1}}],[\"124\",{\"1\":{\"137\":1,\"145\":1,\"152\":1}}],[\"12\",{\"1\":{\"67\":1,\"78\":1,\"146\":2}}],[\"1234\",{\"1\":{\"18\":1}}],[\"123\",{\"1\":{\"18\":1,\"69\":1,\"137\":14,\"140\":2,\"145\":7,\"152\":7}}],[\"1=\",{\"1\":{\"66\":1}}],[\"1==0\",{\"1\":{\"65\":2}}],[\"102\",{\"1\":{\"128\":3,\"129\":3}}],[\"101\",{\"1\":{\"128\":3,\"129\":5}}],[\"100\",{\"1\":{\"27\":1,\"28\":1,\"62\":1,\"63\":3,\"65\":1,\"78\":1}}],[\"10\",{\"1\":{\"25\":1,\"59\":1,\"111\":1,\"113\":1,\"128\":2,\"146\":5,\"153\":2}}],[\"1不等于0\",{\"1\":{\"25\":1}}],[\"1\",{\"0\":{\"135\":1,\"144\":1,\"151\":1},\"1\":{\"19\":1,\"25\":1,\"39\":1,\"44\":1,\"55\":1,\"58\":1,\"59\":1,\"62\":1,\"63\":1,\"65\":4,\"66\":7,\"84\":1,\"91\":1,\"111\":3,\"124\":1,\"127\":3,\"128\":2,\"129\":10,\"138\":1,\"146\":1,\"156\":4,\"157\":5}}],[\"nvl\",{\"1\":{\"142\":1}}],[\"nbdog=nbdog\",{\"1\":{\"76\":1,\"77\":1}}],[\"nbdog是继承dog类的子类\",{\"1\":{\"75\":1}}],[\"nbdog\",{\"1\":{\"75\":2,\"76\":2,\"77\":2}}],[\"next\",{\"1\":{\"41\":1,\"113\":5,\"138\":1}}],[\"newquestion\",{\"1\":{\"100\":1}}],[\"new\",{\"1\":{\"27\":1,\"28\":1,\"35\":2,\"61\":2,\"90\":1,\"92\":1,\"99\":1,\"100\":1,\"102\":1,\"136\":2}}],[\"now\",{\"1\":{\"146\":2}}],[\"not\",{\"1\":{\"65\":2,\"158\":1}}],[\"note\",{\"1\":{\"23\":1,\"99\":1,\"103\":1}}],[\"non\",{\"1\":{\"35\":1,\"142\":2,\"149\":2,\"154\":2}}],[\"n\",{\"1\":{\"25\":1,\"26\":1,\"46\":1}}],[\"nullif\",{\"1\":{\"142\":1,\"149\":3,\"154\":3}}],[\"nulls\",{\"1\":{\"109\":1}}],[\"nullpointerexception\",{\"1\":{\"38\":1}}],[\"null\",{\"1\":{\"22\":3,\"142\":7,\"149\":6,\"154\":6}}],[\"number=list\",{\"1\":{\"58\":1}}],[\"numbers=json\",{\"1\":{\"85\":1}}],[\"numbers=\",{\"1\":{\"84\":1}}],[\"numbers\",{\"1\":{\"39\":2,\"84\":2,\"85\":2}}],[\"number\",{\"1\":{\"19\":1,\"58\":1,\"140\":1,\"141\":1,\"145\":4}}],[\"name的值就是main\",{\"1\":{\"87\":1}}],[\"namestestcase\",{\"1\":{\"87\":1}}],[\"name\",{\"1\":{\"18\":1,\"20\":1,\"69\":7,\"74\":3,\"75\":3,\"76\":2,\"77\":3,\"78\":3,\"79\":2,\"87\":7}}],[\"name=name\",{\"1\":{\"74\":2,\"75\":1,\"77\":1}}],[\"name=\",{\"1\":{\"18\":1,\"69\":3,\"96\":1,\"132\":2}}],[\"sysdate\",{\"1\":{\"138\":1,\"140\":1}}],[\"system\",{\"1\":{\"39\":1}}],[\"smith\",{\"1\":{\"129\":3}}],[\"smembers\",{\"1\":{\"123\":1}}],[\"srem\",{\"1\":{\"123\":1}}],[\"sinter\",{\"1\":{\"123\":1}}],[\"salary\",{\"1\":{\"141\":1}}],[\"sadd\",{\"1\":{\"123\":1}}],[\"said\",{\"1\":{\"20\":1}}],[\"script基础\",{\"0\":{\"159\":1}}],[\"script>\",{\"1\":{\"18\":1,\"101\":1}}],[\"science\",{\"1\":{\"129\":2}}],[\"scard\",{\"1\":{\"123\":1}}],[\"score2\",{\"1\":{\"124\":1}}],[\"score1\",{\"1\":{\"124\":1}}],[\"score是一个double类型的数\",{\"1\":{\"124\":1}}],[\"score\",{\"1\":{\"113\":4,\"141\":2}}],[\"span>\",{\"1\":{\"94\":2,\"95\":1,\"96\":2}}],[\"split方法表示根据空格分开文本\",{\"1\":{\"82\":1}}],[\"split\",{\"1\":{\"82\":1,\"99\":1}}],[\"substring\",{\"1\":{\"144\":2,\"151\":2}}],[\"substr\",{\"1\":{\"136\":1}}],[\"sunion\",{\"1\":{\"123\":1}}],[\"super\",{\"1\":{\"75\":2,\"76\":1,\"77\":1}}],[\"sum\",{\"1\":{\"57\":1,\"139\":1,\"148\":2,\"155\":2}}],[\"seconds\",{\"1\":{\"120\":1}}],[\"select语句的用法\",{\"0\":{\"108\":1}}],[\"select\",{\"1\":{\"107\":1,\"108\":2,\"109\":2,\"110\":1,\"111\":5,\"113\":4,\"114\":2,\"131\":1,\"132\":6}}],[\"self是必须的\",{\"1\":{\"74\":1}}],[\"self\",{\"1\":{\"74\":6,\"75\":4,\"76\":2,\"77\":9,\"78\":6,\"87\":2}}],[\"seen\",{\"1\":{\"97\":1}}],[\"setnx\",{\"1\":{\"120\":1}}],[\"setex\",{\"1\":{\"120\":1}}],[\"set\",{\"1\":{\"66\":1,\"118\":1,\"120\":1,\"132\":1}}],[\"sentence\",{\"1\":{\"20\":1}}],[\"sql语句对大小写不敏感\",{\"1\":{\"130\":1}}],[\"sqlexception\",{\"1\":{\"34\":1}}],[\"square\",{\"1\":{\"59\":1,\"60\":2}}],[\"square=square\",{\"1\":{\"61\":2}}],[\"square=\",{\"1\":{\"59\":1}}],[\"sorted\",{\"1\":{\"53\":1,\"66\":1}}],[\"sort不能直接在print中调用\",{\"1\":{\"53\":1}}],[\"sort\",{\"1\":{\"53\":2}}],[\"studentname\",{\"1\":{\"129\":3}}],[\"studentid\",{\"1\":{\"129\":5}}],[\"start\",{\"1\":{\"122\":1,\"124\":1,\"151\":1}}],[\"static\",{\"1\":{\"25\":1,\"35\":1,\"39\":1}}],[\"stop获取列表指定范围的元素\",{\"1\":{\"122\":1}}],[\"stop\",{\"1\":{\"100\":1,\"124\":1}}],[\"str2\",{\"1\":{\"144\":1,\"151\":1}}],[\"str1\",{\"1\":{\"144\":1,\"151\":1}}],[\"str\",{\"1\":{\"47\":1,\"50\":2,\"51\":2,\"52\":1,\"53\":3,\"54\":1,\"144\":8,\"151\":8}}],[\"strip\",{\"1\":{\"44\":1}}],[\"string\",{\"1\":{\"35\":1,\"39\":1}}],[\"string也是由char序列组成的\",{\"1\":{\"26\":1}}],[\"string在java中是不可变类型的变量\",{\"1\":{\"26\":1}}],[\"strict\",{\"1\":{\"22\":1}}],[\"st\",{\"1\":{\"18\":1,\"157\":3}}],[\"<my\",{\"1\":{\"102\":1}}],[\"<input\",{\"1\":{\"101\":1}}],[\"<template>\",{\"1\":{\"101\":1,\"102\":1}}],[\"<todo\",{\"1\":{\"91\":2}}],[\"<a\",{\"1\":{\"97\":1}}],[\"<p>输入的消息是\",{\"1\":{\"101\":1}}],[\"<p>computed\",{\"1\":{\"99\":1}}],[\"<p>original\",{\"1\":{\"99\":1}}],[\"<p\",{\"1\":{\"97\":1}}],[\"<button\",{\"1\":{\"96\":1,\"97\":1,\"102\":1}}],[\"<span\",{\"1\":{\"94\":1,\"95\":1,\"96\":1}}],[\"<span>\",{\"1\":{\"94\":1}}],[\"<script>\",{\"1\":{\"18\":1,\"101\":1}}],[\"<li>\",{\"1\":{\"91\":2}}],[\"<li>这是一个组件<li>\",{\"1\":{\"91\":1}}],[\"<ol>\",{\"1\":{\"91\":4}}],[\"<div>\",{\"1\":{\"102\":1}}],[\"<div\",{\"1\":{\"90\":1,\"91\":1,\"99\":1}}],[\"<\",{\"1\":{\"18\":1,\"90\":1,\"91\":1,\"94\":2,\"99\":3,\"101\":3,\"102\":4}}],[\"mm\",{\"1\":{\"140\":2}}],[\"mons\",{\"1\":{\"153\":1}}],[\"month\",{\"1\":{\"146\":1}}],[\"months\",{\"1\":{\"138\":2}}],[\"mon\",{\"1\":{\"140\":1}}],[\"model=\",{\"1\":{\"101\":1}}],[\"model是vue中的一个非常重要的指令\",{\"1\":{\"101\":1}}],[\"model\",{\"0\":{\"101\":1}}],[\"ms\",{\"1\":{\"129\":2}}],[\"msg\",{\"1\":{\"94\":2}}],[\"mr\",{\"1\":{\"129\":3}}],[\"member\",{\"1\":{\"124\":2}}],[\"member2\",{\"1\":{\"123\":2,\"124\":1}}],[\"member1\",{\"1\":{\"123\":2,\"124\":1}}],[\"me\",{\"1\":{\"102\":1}}],[\"message2=\",{\"1\":{\"45\":1}}],[\"message=input\",{\"1\":{\"67\":1}}],[\"message=\",{\"1\":{\"43\":1,\"45\":1}}],[\"message\",{\"1\":{\"18\":1,\"45\":1,\"67\":1,\"90\":2,\"99\":5,\"100\":1,\"101\":3}}],[\"mysql\",{\"1\":{\"144\":2}}],[\"mysql数据库函数\",{\"0\":{\"143\":1}}],[\"mysql学习笔记\",{\"0\":{\"104\":1}}],[\"mycomponent\",{\"1\":{\"102\":2}}],[\"my\",{\"1\":{\"74\":4,\"75\":3,\"76\":2,\"77\":6,\"78\":2,\"79\":4,\"102\":2}}],[\"min\",{\"1\":{\"57\":1,\"139\":1,\"148\":2,\"155\":2}}],[\"multiply\",{\"1\":{\"27\":1}}],[\"mar\",{\"1\":{\"138\":2}}],[\"math库\",{\"0\":{\"134\":1}}],[\"math\",{\"1\":{\"129\":3}}],[\"math包里面有两个很有用的类\",{\"1\":{\"27\":1}}],[\"magicians\",{\"1\":{\"64\":1}}],[\"magicians=\",{\"1\":{\"64\":1}}],[\"magician\",{\"1\":{\"64\":3}}],[\"max\",{\"1\":{\"57\":1,\"139\":1,\"148\":2,\"155\":2}}],[\"main\",{\"1\":{\"18\":1,\"35\":1,\"39\":1,\"87\":3}}],[\"dd\",{\"1\":{\"140\":3}}],[\"ddl\",{\"1\":{\"107\":1}}],[\"dcl\",{\"1\":{\"107\":1}}],[\"dql\",{\"1\":{\"107\":1}}],[\"dml库\",{\"0\":{\"134\":1}}],[\"dml\",{\"1\":{\"107\":1}}],[\"drop\",{\"1\":{\"107\":1,\"133\":2}}],[\"distinct\",{\"1\":{\"110\":1,\"132\":1}}],[\"distinct子句\",{\"0\":{\"110\":1}}],[\"div>\",{\"1\":{\"90\":1,\"91\":1,\"99\":1,\"102\":1}}],[\"dimension\",{\"1\":{\"63\":2,\"65\":5,\"156\":1}}],[\"dimension=\",{\"1\":{\"62\":1,\"63\":2}}],[\"dump函数接受两个参数\",{\"1\":{\"84\":1}}],[\"dump\",{\"1\":{\"84\":1}}],[\"dog=dog\",{\"1\":{\"74\":2,\"75\":1,\"77\":1,\"78\":1}}],[\"dog\",{\"1\":{\"74\":4,\"75\":5,\"76\":1,\"77\":4,\"78\":2}}],[\"d==1\",{\"1\":{\"65\":3}}],[\"date2\",{\"1\":{\"146\":1}}],[\"date1\",{\"1\":{\"146\":1}}],[\"datediff\",{\"1\":{\"146\":2}}],[\"date\",{\"1\":{\"140\":1,\"146\":3,\"153\":4}}],[\"database\",{\"1\":{\"133\":2}}],[\"data\",{\"1\":{\"18\":1,\"90\":1,\"91\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1}}],[\"days\",{\"1\":{\"153\":1}}],[\"day\",{\"1\":{\"138\":2}}],[\"dad\",{\"1\":{\"64\":1}}],[\"d\",{\"1\":{\"27\":1,\"65\":8}}],[\"decimals\",{\"1\":{\"145\":1}}],[\"dense\",{\"1\":{\"141\":1}}],[\"desc\",{\"1\":{\"141\":3}}],[\"desc表示降序\",{\"1\":{\"109\":1}}],[\"debouncedgetanswer\",{\"1\":{\"100\":1}}],[\"def\",{\"1\":{\"68\":1,\"69\":7,\"74\":2,\"75\":2,\"76\":1,\"77\":4,\"78\":2,\"87\":1}}],[\"default\",{\"1\":{\"18\":1,\"101\":1,\"142\":2}}],[\"delete\",{\"1\":{\"107\":1,\"131\":1,\"132\":2}}],[\"del\",{\"1\":{\"51\":1,\"66\":1,\"125\":1}}],[\"details\",{\"1\":{\"18\":1}}],[\"johnson\",{\"1\":{\"129\":2}}],[\"join\",{\"1\":{\"99\":1}}],[\"joplin\",{\"1\":{\"87\":2}}],[\"js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进dom的系统\",{\"1\":{\"90\":1}}],[\"json\",{\"0\":{\"134\":1},\"1\":{\"84\":4,\"85\":2}}],[\"json文件\",{\"0\":{\"83\":1}}],[\"js中\",{\"1\":{\"18\":1}}],[\"jan\",{\"1\":{\"138\":9,\"140\":2}}],[\"janis\",{\"1\":{\"87\":2}}],[\"jane\",{\"1\":{\"18\":1}}],[\"java学习笔记\",{\"0\":{\"160\":1}}],[\"java\",{\"0\":{\"159\":1},\"1\":{\"35\":3,\"40\":3}}],[\"java的数组初始化以后会自动填充默认值\",{\"1\":{\"28\":1}}],[\"java的程序实际上是在虚拟机jvm上运行的\",{\"1\":{\"25\":1}}],[\"java中的linkedlist\",{\"1\":{\"118\":1}}],[\"java中没有运算符重载的功能\",{\"1\":{\"27\":1}}],[\"java中用final修饰常量\",{\"1\":{\"25\":1}}],[\"java中\",{\"1\":{\"25\":1}}],[\"java线程和线程锁\",{\"0\":{\"23\":1}}],[\"javascript\",{\"1\":{\"22\":1}}],[\"javascript基础零碎\",{\"0\":{\"16\":1}}],[\"javascript基础\",{\"0\":{\"10\":1}}],[\"java基础零碎\",{\"0\":{\"24\":1}}],[\"java基础\",{\"0\":{\"9\":1}}],[\"=10\",{\"1\":{\"66\":1}}],[\"=100\",{\"1\":{\"66\":1}}],[\"===\",{\"1\":{\"22\":4}}],[\"==\",{\"1\":{\"22\":4,\"30\":2,\"87\":1}}],[\"=\",{\"1\":{\"18\":2,\"19\":1,\"20\":2,\"26\":1,\"27\":4,\"28\":2,\"35\":2,\"39\":1,\"64\":1,\"78\":2,\"87\":1,\"90\":1,\"92\":1,\"99\":1,\"100\":2,\"111\":3,\"114\":1}}],[\"part\",{\"1\":{\"153\":2}}],[\"pattern\",{\"1\":{\"125\":1}}],[\"percent\",{\"1\":{\"113\":1}}],[\"person\",{\"1\":{\"18\":1}}],[\"placeholder=\",{\"1\":{\"101\":1}}],[\"p>\",{\"1\":{\"97\":1,\"99\":2,\"101\":1}}],[\"precision\",{\"1\":{\"152\":1}}],[\"price\",{\"1\":{\"128\":2,\"148\":4,\"155\":4}}],[\"print\",{\"1\":{\"45\":1,\"58\":1,\"59\":1,\"60\":2,\"63\":2,\"64\":1,\"65\":9,\"66\":9,\"67\":1,\"68\":1,\"69\":9,\"74\":2,\"75\":1,\"76\":1,\"77\":2,\"78\":1,\"79\":2,\"80\":3,\"81\":2,\"82\":1,\"85\":1}}],[\"println\",{\"1\":{\"39\":1}}],[\"printstacktrace\",{\"1\":{\"35\":1}}],[\"product\",{\"1\":{\"128\":4}}],[\"productname\",{\"1\":{\"128\":4}}],[\"productid\",{\"1\":{\"128\":7}}],[\"props\",{\"1\":{\"91\":2}}],[\"polygon\",{\"1\":{\"157\":1}}],[\"postgresql\",{\"1\":{\"151\":2}}],[\"postgresql数据库函数\",{\"0\":{\"150\":1}}],[\"pos\",{\"1\":{\"144\":1}}],[\"position\",{\"1\":{\"66\":3}}],[\"point\",{\"1\":{\"66\":7}}],[\"pop\",{\"1\":{\"51\":1}}],[\"py在文件查询的过程中\",{\"1\":{\"80\":1}}],[\"py的这种方式让人感觉非常口语化\",{\"1\":{\"65\":1}}],[\"python学习笔记\",{\"0\":{\"161\":1}}],[\"python\",{\"1\":{\"45\":1}}],[\"python从入门到实践\",{\"0\":{\"42\":1}}],[\"python基础\",{\"0\":{\"11\":1}}],[\"pizza\",{\"1\":{\"66\":2}}],[\"pizza=\",{\"1\":{\"66\":1}}],[\"pi\",{\"1\":{\"65\":1}}],[\"public\",{\"1\":{\"35\":2,\"39\":2}}],[\"phone\",{\"1\":{\"18\":1}}],[\"里面的内容是对象的内容\",{\"1\":{\"18\":1}}],[\"的最后一天\",{\"1\":{\"138\":1}}],[\"的最大整数\",{\"1\":{\"137\":1}}],[\"的最小整数\",{\"1\":{\"137\":1}}],[\"的绝对值\",{\"1\":{\"137\":1}}],[\"的长度\",{\"1\":{\"136\":1}}],[\"的区别\",{\"0\":{\"21\":1}}],[\"的用法\",{\"0\":{\"18\":1,\"19\":1}}],[\"的使用\",{\"0\":{\"17\":1}}],[\"和mysql一样\",{\"1\":{\"119\":1}}],[\"和五中不同类型的值\",{\"1\":{\"117\":1}}],[\"和另一个具有相同字面量的字符串变量就不指向同一块地址了\",{\"1\":{\"26\":1}}],[\"和字符串\",{\"1\":{\"22\":1}}],[\"和\",{\"0\":{\"17\":1,\"21\":1,\"22\":1},\"1\":{\"22\":1,\"30\":2,\"41\":1,\"128\":3,\"129\":2}}],[\"❦ω❦\",{\"1\":{\"15\":1}}],[\"期待你的留言\",{\"1\":{\"15\":1}}],[\"都可以在下面提出来\",{\"1\":{\"15\":1}}],[\"留言墙\",{\"0\":{\"15\":1}}],[\"有序集合\",{\"0\":{\"124\":1}}],[\"有序集合sorted\",{\"1\":{\"118\":1}}],[\"有c语言基础一秒看懂\",{\"1\":{\"64\":1,\"65\":1,\"69\":1}}],[\"有时候会事半功倍~\",{\"1\":{\"14\":1}}],[\"有些知识点非常零碎\",{\"1\":{\"14\":1}}],[\"善用搜索功能\",{\"1\":{\"14\":1}}],[\"另外\",{\"1\":{\"14\":1}}],[\"请读者自行甄别\",{\"1\":{\"14\":1}}],[\"适合查缺补漏\",{\"1\":{\"14\":1}}],[\"是外键\",{\"1\":{\"128\":1}}],[\"是主键\",{\"1\":{\"128\":3}}],[\"是一个通配符\",{\"1\":{\"111\":1}}],[\"是不是你要执行运行的文件\",{\"1\":{\"87\":1}}],[\"是遍历集合元素的工具\",{\"1\":{\"41\":1}}],[\"是所有checked异常的父类\",{\"1\":{\"40\":1}}],[\"是所有异常的根类\",{\"1\":{\"40\":1}}],[\"是完全相异的概念\",{\"1\":{\"26\":1}}],[\"是我自己的笔记\",{\"1\":{\"14\":1}}],[\"是在脑子里面检索你的知识存储区\",{\"1\":{\"7\":1}}],[\"目前收录了以下内容\",{\"1\":{\"8\":1}}],[\"↗\",{\"1\":{\"8\":1}}],[\"￣\",{\"1\":{\"8\":2}}],[\"也会包含在内\",{\"1\":{\"113\":1}}],[\"也必须为\",{\"1\":{\"30\":1}}],[\"也就是说组件里面的内容\",{\"1\":{\"91\":1}}],[\"也就是说目前存放代码的文件\",{\"1\":{\"87\":1}}],[\"也就是说必须函数里面每个变量都有值\",{\"1\":{\"69\":1}}],[\"也就是说不能有两个名字相同\",{\"1\":{\"29\":1}}],[\"也就是说null和\",{\"1\":{\"26\":1}}],[\"也表示长度为0的字符串\",{\"1\":{\"26\":1}}],[\"也被转换成了数字\",{\"1\":{\"22\":1}}],[\"也希望在自己的表述下能够帮到别人\",{\"1\":{\"8\":1}}],[\"也许会恍然大悟\",{\"1\":{\"3\":1}}],[\"既是对自己的复习\",{\"1\":{\"8\":1}}],[\"以及一些基本的数据库标准库函数\",{\"1\":{\"130\":1}}],[\"以及执行子子语句\",{\"1\":{\"114\":1}}],[\"以及我在学习一些知识过程中的总结\",{\"1\":{\"8\":1}}],[\"以首字母大写的形式输出单词\",{\"1\":{\"44\":1}}],[\"以后不会改变\",{\"1\":{\"94\":1}}],[\"以后可能也准备创业\",{\"1\":{\"5\":1}}],[\"以后创业的话\",{\"1\":{\"5\":1}}],[\"技术文章\",{\"0\":{\"8\":1}}],[\"同样的用法还有or\",{\"1\":{\"132\":1}}],[\"同样记忆的也更牢固了\",{\"1\":{\"7\":1}}],[\"同时也能在记重点的过程中形成正向反馈\",{\"1\":{\"3\":1}}],[\"缓存的多了\",{\"1\":{\"7\":1}}],[\"缓存\",{\"1\":{\"7\":1}}],[\"但排名将连续不留空\",{\"1\":{\"141\":1}}],[\"但每个值只出现一次\",{\"1\":{\"132\":1}}],[\"但它们实际上是属于产品信息\",{\"1\":{\"128\":1}}],[\"但它们实际上是属于客户信息\",{\"1\":{\"128\":1}}],[\"但它会在运行时抛出\",{\"1\":{\"39\":1}}],[\"但仅能在12c以上版本使用\",{\"1\":{\"113\":1}}],[\"但实际上这样并不安全\",{\"1\":{\"95\":1}}],[\"但不提供具体的迭代实现\",{\"1\":{\"41\":1}}],[\"但不包括\",{\"1\":{\"40\":1}}],[\"但不表示null\",{\"1\":{\"26\":1}}],[\"但好的hashcode实现应该尽量避免这种情况\",{\"1\":{\"30\":1}}],[\"但有不同返回类型的方法\",{\"1\":{\"29\":1}}],[\"但并不是null\",{\"1\":{\"28\":1}}],[\"但这并不是一种很好的编程方法\",{\"1\":{\"25\":1}}],[\"但双引号的优点是可以嵌套单引号\",{\"1\":{\"20\":1}}],[\"但一定会在检索的过程中增加更多\",{\"1\":{\"7\":1}}],[\"但是vue3同样也是值得学习的\",{\"1\":{\"103\":1}}],[\"但是如果使用方法的话每次都会重新执行一遍\",{\"1\":{\"99\":1}}],[\"但是不同的是计算属性是基于他们的响应式依赖进行缓存的\",{\"1\":{\"99\":1}}],[\"但是这样的缺点是每个待办项会被渲染相同的文本\",{\"1\":{\"91\":1}}],[\"但是对于初学者可以直接都不用加\",{\"1\":{\"81\":1}}],[\"但是可以直接调用获取这个值和修改\",{\"1\":{\"74\":1}}],[\"但是可以通过传递对象的方式修改对象的属性和值\",{\"1\":{\"29\":1}}],[\"但是+或者substring等操作得到的字符串\",{\"1\":{\"26\":1}}],[\"但是他并不高效\",{\"1\":{\"7\":1}}],[\"但是后来遇到了各种现实阻力\",{\"1\":{\"5\":1}}],[\"在销售表中\",{\"1\":{\"148\":1}}],[\"在字符串中替换子串\",{\"1\":{\"144\":1,\"151\":1}}],[\"在字符串变量中\",{\"1\":{\"26\":1}}],[\"在成绩表中\",{\"1\":{\"141\":1}}],[\"在收入列上使用\",{\"1\":{\"139\":1}}],[\"在日期\",{\"1\":{\"138\":1}}],[\"在数据库语言中\",{\"1\":{\"107\":1}}],[\"在数组特定位置插入元素\",{\"1\":{\"50\":1}}],[\"在组件中的data必须是一个函数function\",{\"1\":{\"102\":1}}],[\"在里面创建了\",{\"1\":{\"99\":1}}],[\"在不同的阶段会有不同的周期钩子\",{\"1\":{\"92\":1}}],[\"在测试自己编写的类时\",{\"1\":{\"88\":1}}],[\"在test类中被优先调用\",{\"1\":{\"88\":1}}],[\"在方法中比较得到的结果与预期是否相符\",{\"1\":{\"87\":1}}],[\"在方法重载中\",{\"1\":{\"29\":1}}],[\"在except后接pass就行\",{\"1\":{\"81\":1}}],[\"在相对路径中\",{\"1\":{\"80\":1}}],[\"在读取文件后显示的实际上末尾会多出来一个空行\",{\"1\":{\"80\":1}}],[\"在car后面加逗号然后加入别的类\",{\"1\":{\"79\":1}}],[\"在实例化的时候也不需要写出来\",{\"1\":{\"74\":1}}],[\"在列表末尾添加一个元素\",{\"1\":{\"50\":1}}],[\"在上面的例子中\",{\"1\":{\"35\":1,\"39\":1}}],[\"在一个构造器中可以使用this来调用另一个构造器\",{\"1\":{\"29\":1}}],[\"在java的异常层次结构中\",{\"1\":{\"40\":1}}],[\"在java编程中\",{\"1\":{\"31\":1}}],[\"在java\",{\"1\":{\"27\":1}}],[\"在java中\",{\"1\":{\"25\":1,\"28\":1,\"29\":1}}],[\"在js中单引号和双引号都可以引用字符串\",{\"1\":{\"20\":1}}],[\"在js中\",{\"1\":{\"19\":1}}],[\"在js中大括号\",{\"1\":{\"18\":1}}],[\"在比较前会进行类型转换\",{\"1\":{\"22\":1}}],[\"在vue实例化的过程中会有一个阶段\",{\"1\":{\"92\":1}}],[\"在vue\",{\"1\":{\"18\":1}}],[\"在函数内部声明的变量只在函数内部有效\",{\"1\":{\"16\":1}}],[\"在函数外声明的变量具有全局作用于\",{\"1\":{\"16\":1}}],[\"在于你输出的过程中\",{\"1\":{\"7\":1}}],[\"在深入理解的过程中也能分享给别人\",{\"1\":{\"6\":1}}],[\"能够做到无论什么事情都能在第一次见面就记得比较牢固\",{\"1\":{\"7\":1}}],[\"想想你这样做了以后\",{\"1\":{\"7\":1}}],[\"千万不要觉得这个过程很浪费时间或者很痛苦\",{\"1\":{\"7\":1}}],[\"至于为什么没有完全记住\",{\"1\":{\"7\":1}}],[\"你的生日在圆周率里面\",{\"1\":{\"65\":1}}],[\"你就会惊讶地发现\",{\"1\":{\"7\":1}}],[\"你直接不看这个东西默背一遍\",{\"1\":{\"7\":1}}],[\"立马用你自己的话复述一遍\",{\"1\":{\"7\":1}}],[\"立志要做出国产化的图形系统\",{\"1\":{\"5\":1}}],[\"可以找到最低的销售价格\",{\"1\":{\"148\":1,\"155\":1}}],[\"可以找到最高的销售价格\",{\"1\":{\"148\":1,\"155\":1}}],[\"可以计算表中的行数\",{\"1\":{\"148\":1,\"155\":1}}],[\"可以计算平均销售价格\",{\"1\":{\"148\":1,\"155\":1}}],[\"可以计算总销售额\",{\"1\":{\"148\":1,\"155\":1}}],[\"可以计算总收入\",{\"1\":{\"139\":1}}],[\"可以将存储在内存的\",{\"1\":{\"117\":1}}],[\"可以替换为\",{\"1\":{\"113\":1}}],[\"可以替换为r\",{\"1\":{\"80\":1}}],[\"可以多次使用\",{\"1\":{\"112\":1}}],[\"可以确保表单输入的值和数据模型中的值保持同步\",{\"1\":{\"101\":1}}],[\"可以直接缩写为\",{\"1\":{\"97\":2}}],[\"可以使用赋值特性来扩展读性能\",{\"1\":{\"117\":1}}],[\"可以使用\",{\"1\":{\"96\":1}}],[\"可以在另一段代码中使用\",{\"1\":{\"91\":1}}],[\"可以在setup\",{\"1\":{\"88\":1}}],[\"可以在迭代过程中删除元素\",{\"1\":{\"41\":1}}],[\"可以根据一个类创建多个对象\",{\"1\":{\"74\":1}}],[\"可以用这种方法遍历字符串\",{\"1\":{\"26\":1}}],[\"可以说记忆相当高效了\",{\"1\":{\"7\":1}}],[\"可不是程序中的输出哈\",{\"1\":{\"7\":1}}],[\"魅力\",{\"1\":{\"7\":1}}],[\"所以改成下面的表\",{\"1\":{\"127\":1}}],[\"所以他的读写效率相对于其他数据库较高\",{\"1\":{\"117\":1}}],[\"所以先学习了vue2\",{\"1\":{\"103\":1}}],[\"所以相对来说计算属性更加高效\",{\"1\":{\"99\":1}}],[\"所以在定义测试函数的时候要注意函数的命名\",{\"1\":{\"87\":1}}],[\"所以在声明变量之前首先需要class\",{\"1\":{\"75\":1}}],[\"所以调用父类的init的方法进行初始化\",{\"1\":{\"75\":1}}],[\"所以需要时不时复习\",{\"1\":{\"7\":1}}],[\"所以更高效的记忆方法就是输出\",{\"1\":{\"7\":1}}],[\"所以这个方向一直都没有实现下去\",{\"1\":{\"5\":1}}],[\"然后再进行外部的查询\",{\"1\":{\"114\":1}}],[\"然后再进行比较\",{\"1\":{\"22\":1}}],[\"然后再使用的过程中慢慢理解原理\",{\"1\":{\"106\":1}}],[\"然后执行后面的测试\",{\"1\":{\"87\":1}}],[\"然后创建一个表示test的类\",{\"1\":{\"87\":1}}],[\"然后你经过这个过程以后\",{\"1\":{\"7\":1}}],[\"然后很久以后需要用到的时候才会见第二次\",{\"1\":{\"7\":1}}],[\"然后有些时候我们并没有那么多机会去见一个东西很多次\",{\"1\":{\"7\":1}}],[\"或者\",{\"1\":{\"115\":1}}],[\"或者换一种方法\",{\"1\":{\"7\":1}}],[\"或者你是过目不忘的超强记忆力选手\",{\"1\":{\"7\":1}}],[\"或者具体在做题的时候你想到这个东西应用出来\",{\"1\":{\"7\":1}}],[\"那就需要用两个\",{\"1\":{\"80\":1}}],[\"那就更好了\",{\"1\":{\"3\":1}}],[\"那么这就是一个传递依赖\",{\"1\":{\"129\":1}}],[\"那么缺了a不行\",{\"1\":{\"128\":1}}],[\"那么该方法要么必须在方法签名中声明该异常\",{\"1\":{\"33\":1}}],[\"那么它们的hashcode值不要求一定不相等\",{\"1\":{\"30\":1}}],[\"那么它们的哈希码值必须相等\",{\"1\":{\"30\":1}}],[\"那么\",{\"1\":{\"30\":1,\"99\":1}}],[\"那么就需要使用数组列表\",{\"1\":{\"28\":1}}],[\"那么就会被java自动进行垃圾回收\",{\"1\":{\"26\":1}}],[\"那你就在见他的第一次的时候\",{\"1\":{\"7\":1}}],[\"那你必须要见这个东西很多次才能记住\",{\"1\":{\"7\":1}}],[\"俗话说就是你见得多了自然而然就记住了\",{\"1\":{\"7\":1}}],[\"ଘ\",{\"1\":{\"6\":1}}],[\"੭\",{\"1\":{\"6\":1}}],[\"੭ˊᵕˋ\",{\"1\":{\"6\":1}}],[\"才会事半功倍\",{\"1\":{\"6\":1}}],[\"要继承unittest\",{\"1\":{\"87\":1}}],[\"要用a模式\",{\"1\":{\"80\":1}}],[\"要么必须在方法体内通过try\",{\"1\":{\"33\":1}}],[\"要是您来山西\",{\"1\":{\"5\":1}}],[\"要知道这个方向是当时非常具有前景的\",{\"1\":{\"5\":1}}],[\"说到山西的肉特别好吃\",{\"1\":{\"5\":1}}],[\"笑\",{\"1\":{\"5\":1}}],[\"我被创建了\",{\"1\":{\"92\":1}}],[\"我觉得输出能够记忆更高效的原因\",{\"1\":{\"7\":1}}],[\"我今天刚刚尝试了一下输出的\",{\"1\":{\"7\":1}}],[\"我们这样拆分\",{\"1\":{\"129\":1}}],[\"我们可以这样拆分\",{\"1\":{\"128\":1}}],[\"我们可以同样将计算属性转换为方法\",{\"1\":{\"99\":1}}],[\"我们可以将一段代码提取到计算属性中\",{\"1\":{\"99\":1}}],[\"我们在钩子上挂载代码\",{\"1\":{\"92\":1}}],[\"我们引入了conponent中的一个属性\",{\"1\":{\"91\":1}}],[\"我们往往需要定制修改一些东西\",{\"1\":{\"91\":1}}],[\"我们一般使用\",{\"1\":{\"80\":1}}],[\"我们就很难想起来这个东西到底是啥了\",{\"1\":{\"7\":1}}],[\"我们只会见这个东西一次来记忆\",{\"1\":{\"7\":1}}],[\"我曾经也觉得\",{\"1\":{\"7\":1}}],[\"我会总结自己的学习方法\",{\"1\":{\"6\":1}}],[\"我肯定招待您\",{\"1\":{\"5\":1}}],[\"我答道\",{\"1\":{\"5\":1}}],[\"我的想法也是这样的\",{\"1\":{\"5\":1}}],[\"我和老师说\",{\"1\":{\"5\":1}}],[\"我是谁\",{\"0\":{\"1\":1}}],[\"了解整个的模式以后自己再创业\",{\"1\":{\"5\":1}}],[\"国外的生活不仅压力小而且收益多\",{\"1\":{\"5\":1}}],[\"叫什么名字我记不清了\",{\"1\":{\"5\":1}}],[\"包括现在老师也是一周不休息每天都工作\",{\"1\":{\"5\":1}}],[\"这是一个传递依赖\",{\"1\":{\"129\":1}}],[\"这是一个部分依赖\",{\"1\":{\"129\":1}}],[\"这是什么\",{\"0\":{\"2\":1}}],[\"这也是部分依赖\",{\"1\":{\"129\":1}}],[\"这也类似于函数或方法的复用\",{\"1\":{\"102\":1}}],[\"这也确实是一种记忆方法\",{\"1\":{\"7\":1}}],[\"这种方法要更加容易\",{\"1\":{\"88\":1}}],[\"这样也许不失为一种高效的学习方式\",{\"1\":{\"106\":1}}],[\"这样的话输入的信息可以实时显示出来\",{\"1\":{\"101\":1}}],[\"这样我们就可以使用v\",{\"1\":{\"91\":1}}],[\"这样我们就成功创建了第一个vue应用\",{\"1\":{\"90\":1}}],[\"这样就消除了部分依赖\",{\"1\":{\"128\":1}}],[\"这样就满足了原子性\",{\"1\":{\"127\":1}}],[\"这样就注册好了一个组件\",{\"1\":{\"91\":1}}],[\"这样就有了经验了\",{\"1\":{\"5\":1}}],[\"这样方便很多\",{\"1\":{\"81\":1}}],[\"这段代码里面要注意最后一个print\",{\"1\":{\"77\":1}}],[\"这将抛出arrayindexoutofboundsexception\",{\"1\":{\"39\":1}}],[\"这类异常在运行时才会抛出\",{\"1\":{\"37\":1}}],[\"这意味着\",{\"1\":{\"33\":1}}],[\"这两类异常的主要区别在于它们的处理方式以及在编译时和运行时的行为\",{\"1\":{\"31\":1}}],[\"这两个类可以处理包含任意长度数字序列的数值\",{\"1\":{\"27\":1}}],[\"这个函数就会运行\",{\"1\":{\"100\":1}}],[\"这个测试是单元测试\",{\"1\":{\"87\":1}}],[\"这个反斜杠会被认为是转义字符的标志\",{\"1\":{\"80\":1}}],[\"这个斜杠的话\",{\"1\":{\"80\":1}}],[\"这个斜杠\",{\"1\":{\"80\":1}}],[\"这个概念是不同于c\",{\"1\":{\"26\":1}}],[\"这个常量可以在一个类的多个方法中使用\",{\"1\":{\"25\":1}}],[\"这个东西竟然你已经记得差不多了\",{\"1\":{\"7\":1}}],[\"这就意味着只要message不变\",{\"1\":{\"99\":1}}],[\"这就完美实现了可移植性\",{\"1\":{\"25\":1}}],[\"这就成为一次输出\",{\"1\":{\"7\":1}}],[\"这部分知识掌握还不太熟练\",{\"1\":{\"23\":1}}],[\"这里\",{\"1\":{\"128\":3}}],[\"这里的数据类型特指value的数据类型\",{\"1\":{\"118\":1}}],[\"这里的输出\",{\"1\":{\"7\":1}}],[\"这里介绍几个通配符\",{\"1\":{\"115\":1}}],[\"这里说明一下还可用not\",{\"1\":{\"114\":1}}],[\"这里输出以后\",{\"1\":{\"77\":1}}],[\"这里要注意\",{\"1\":{\"77\":1}}],[\"这里将介绍一些好玩的技术\",{\"1\":{\"8\":1}}],[\"这下我不得不加班加点完成任务了\",{\"1\":{\"5\":1}}],[\"这才慢慢景气起来\",{\"1\":{\"5\":1}}],[\"拉拢了一些学校的人才\",{\"1\":{\"5\":1}}],[\"成果很少并且成本很高\",{\"1\":{\"5\":1}}],[\"成长历程\",{\"0\":{\"5\":1}}],[\"起初老师创业做的方向是opengl图形方向\",{\"1\":{\"5\":1}}],[\"几年以后小厂倒闭了\",{\"1\":{\"5\":1}}],[\"老师说服务器已经给我开好了\",{\"1\":{\"5\":1}}],[\"老师还问了问我的家乡\",{\"1\":{\"5\":1}}],[\"老师还说以后我要是想创业了肯定支持我\",{\"1\":{\"5\":1}}],[\"老师还和我说\",{\"1\":{\"5\":1}}],[\"老师和我说曾经也有一个学生像我一样\",{\"1\":{\"5\":1}}],[\"老师和我说一块芯片就要10w块钱\",{\"1\":{\"5\":1}}],[\"老师一开始现在小厂工作\",{\"1\":{\"5\":1}}],[\"老师的经历对我触动很大\",{\"1\":{\"5\":1}}],[\"404\",{\"1\":{\"158\":1}}],[\"45\",{\"1\":{\"137\":8,\"140\":2,\"145\":2,\"152\":2}}],[\"4567\",{\"1\":{\"137\":4,\"145\":1,\"152\":1}}],[\"46\",{\"1\":{\"137\":1,\"145\":1,\"152\":1}}],[\"4\",{\"0\":{\"141\":1,\"147\":1,\"154\":1},\"1\":{\"5\":1,\"19\":1,\"84\":1,\"156\":4}}],[\"56\",{\"1\":{\"146\":2}}],[\"555\",{\"1\":{\"18\":1}}],[\"5\",{\"0\":{\"142\":1,\"148\":1,\"155\":1},\"1\":{\"5\":1,\"19\":1,\"22\":8,\"44\":1,\"58\":1,\"66\":5,\"81\":1,\"84\":1,\"113\":4,\"128\":2,\"136\":2,\"144\":2,\"151\":2}}],[\"某个瞬间看到曾经记过的笔记\",{\"1\":{\"3\":1}}],[\"一旦修改的话所有使用这个组件的地方都被修改了\",{\"1\":{\"91\":1}}],[\"一般情况下他们得到的结果是相同的\",{\"1\":{\"26\":1}}],[\"一般而言\",{\"1\":{\"20\":1}}],[\"一些方法论\",{\"1\":{\"2\":1}}],[\"一些生活感悟\",{\"1\":{\"2\":1}}],[\"一些学习笔记\",{\"1\":{\"2\":1}}],[\"一个星号创建的是元组\",{\"1\":{\"69\":1}}],[\"一个生活记录\",{\"1\":{\"2\":1}}],[\"一个个人总结\",{\"1\":{\"2\":1}}],[\"一个喜欢思考和总结的人\",{\"1\":{\"1\":1}}],[\"一条善良的灵魂\",{\"1\":{\"1\":1}}],[\"一名极客\",{\"1\":{\"1\":1}}],[\"一名程序员\",{\"1\":{\"1\":1}}],[\"一名计算机专业学生\",{\"1\":{\"1\":1}}],[\"id\",{\"1\":{\"91\":4,\"109\":2,\"111\":4,\"114\":2,\"132\":1}}],[\"id=1\",{\"1\":{\"132\":2}}],[\"id=1><\",{\"1\":{\"96\":1}}],[\"id=2\",{\"1\":{\"132\":2}}],[\"id=\",{\"1\":{\"90\":1,\"91\":1,\"99\":1}}],[\"item>\",{\"1\":{\"91\":2}}],[\"item><\",{\"1\":{\"91\":1}}],[\"item\",{\"1\":{\"91\":6}}],[\"items\",{\"1\":{\"66\":1}}],[\"iterator接口提供了实际的迭代行为\",{\"1\":{\"41\":1}}],[\"iterator有三个方法\",{\"1\":{\"41\":1}}],[\"iterator对象\",{\"1\":{\"41\":2}}],[\"iterator\",{\"1\":{\"41\":3}}],[\"iterable只有一个方法\",{\"1\":{\"41\":1}}],[\"iterable接口的类可以使用增强型for循环\",{\"1\":{\"41\":1}}],[\"iterable接口和iteator接口\",{\"0\":{\"41\":1}}],[\"iterable\",{\"1\":{\"41\":1}}],[\"if=\",{\"1\":{\"97\":1}}],[\"if\",{\"1\":{\"65\":7,\"87\":1,\"147\":2}}],[\"if条件\",{\"0\":{\"65\":1}}],[\"index\",{\"1\":{\"133\":2}}],[\"increment\",{\"1\":{\"124\":1}}],[\"in子句\",{\"0\":{\"114\":1}}],[\"init的下划线是类里面的方法必须具备的\",{\"1\":{\"74\":1}}],[\"init\",{\"1\":{\"74\":3,\"75\":3,\"76\":2,\"77\":3,\"78\":2}}],[\"input事件\",{\"1\":{\"101\":1}}],[\"input\",{\"1\":{\"69\":1}}],[\"input相当于兼顾了c语言中printf和scanf的功能\",{\"1\":{\"67\":1}}],[\"in\",{\"1\":{\"59\":1,\"64\":1,\"65\":5,\"66\":2,\"80\":1,\"82\":1,\"91\":1,\"111\":1,\"114\":2}}],[\"insert\",{\"1\":{\"50\":2,\"107\":1,\"131\":1,\"132\":1}}],[\"interval\",{\"1\":{\"146\":2}}],[\"into\",{\"1\":{\"131\":1,\"132\":1}}],[\"int\",{\"1\":{\"28\":3,\"39\":1,\"67\":1}}],[\"io\",{\"1\":{\"35\":3}}],[\"ioexception\",{\"1\":{\"34\":1}}],[\"import\",{\"1\":{\"35\":3,\"71\":1,\"72\":1,\"73\":1,\"79\":3,\"84\":1,\"85\":1,\"87\":2,\"102\":2}}],[\"is\",{\"0\":{\"2\":1},\"1\":{\"77\":1}}],[\"i\",{\"0\":{\"1\":1}}],[\"avg\",{\"1\":{\"139\":1,\"148\":2,\"155\":2}}],[\"alter\",{\"1\":{\"133\":2}}],[\"alic\",{\"1\":{\"111\":1,\"115\":2}}],[\"alice\",{\"1\":{\"18\":1,\"64\":2,\"71\":1,\"72\":1,\"73\":1,\"82\":1,\"96\":1,\"111\":1,\"114\":1,\"128\":2,\"129\":3,\"132\":4}}],[\"alien=\",{\"1\":{\"66\":1}}],[\"alien\",{\"1\":{\"66\":19}}],[\"a依赖于b\",{\"1\":{\"129\":1}}],[\"abs\",{\"1\":{\"137\":1,\"145\":2,\"152\":2}}],[\"ab\",{\"1\":{\"115\":1}}],[\"abc\",{\"1\":{\"115\":1}}],[\"about\",{\"0\":{\"0\":1,\"3\":1}}],[\"answer\",{\"1\":{\"100\":1}}],[\"and子句在上面介绍过\",{\"1\":{\"112\":1}}],[\"and和or子句\",{\"0\":{\"112\":1}}],[\"and\",{\"1\":{\"65\":1,\"111\":2,\"132\":1}}],[\"a>\",{\"1\":{\"97\":1}}],[\"attribute插值\",{\"0\":{\"96\":1}}],[\"app7=new\",{\"1\":{\"91\":1}}],[\"app=new\",{\"1\":{\"91\":1}}],[\"app\",{\"1\":{\"90\":3,\"91\":2,\"92\":1,\"102\":1}}],[\"append\",{\"1\":{\"50\":2,\"156\":2}}],[\"age=16\",{\"1\":{\"75\":1,\"77\":1}}],[\"age=12\",{\"1\":{\"74\":1,\"75\":1,\"77\":1}}],[\"age=age\",{\"1\":{\"74\":1}}],[\"age=30\",{\"1\":{\"18\":1}}],[\"age\",{\"1\":{\"74\":2,\"75\":1,\"77\":3,\"78\":1,\"153\":2}}],[\"asc\",{\"1\":{\"109\":2}}],[\"assertequal\",{\"1\":{\"87\":1}}],[\"as\",{\"1\":{\"73\":1,\"80\":4,\"84\":1,\"85\":1}}],[\"asd=\",{\"1\":{\"69\":1}}],[\"asd\",{\"1\":{\"66\":1}}],[\"area\",{\"1\":{\"157\":2}}],[\"arithmeticexception\",{\"1\":{\"38\":1}}],[\"array\",{\"1\":{\"156\":8}}],[\"arrayindexoutofboundsexception是一个unchecked异常\",{\"1\":{\"39\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"38\":1}}],[\"arrays\",{\"1\":{\"28\":1}}],[\"args\",{\"1\":{\"35\":1,\"39\":1}}],[\"add\",{\"1\":{\"27\":1,\"138\":1,\"146\":2}}],[\"address\",{\"1\":{\"18\":1}}],[\"a\",{\"1\":{\"20\":1,\"27\":2,\"28\":3,\"30\":6,\"50\":2,\"55\":2,\"69\":1,\"80\":1,\"128\":2,\"142\":2,\"149\":4,\"154\":4}}],[\"am\",{\"0\":{\"1\":1}}],[\"|\",{\"0\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1},\"1\":{\"151\":2}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
